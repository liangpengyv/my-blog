{"meta":{"title":"老梁有墨","subtitle":"","description":"","author":"会弹吉他的程序员","url":"https://www.laoliang.ink","root":"/"},"pages":[{"title":"","date":"2024-11-16T11:26:50.312Z","updated":"2024-11-16T11:26:50.312Z","comments":true,"path":"404.html","permalink":"https://www.laoliang.ink/404.html","excerpt":"","text":"404 很抱歉，您访问的页面不存在 可能是输入地址有误或该地址已被删除 🔙 返回首页"},{"title":"","date":"2024-11-16T11:26:50.346Z","updated":"2024-11-16T11:26:50.346Z","comments":true,"path":"about/index.html","permalink":"https://www.laoliang.ink/about/index.html","excerpt":"","text":"一个会弹吉他的程序员 喜欢🚴‍♀️骑车🏊游泳🏄‍♀️滑板✈️旅行 😳小时候喜欢守着工具箱，搞搞小制作🛠️ 🧐长大了喜欢守在电脑前，敲着 printf(“Hello world”)🔤"},{"title":"分类","date":"2024-11-16T11:26:50.348Z","updated":"2024-11-16T11:26:50.348Z","comments":true,"path":"categories/index.html","permalink":"https://www.laoliang.ink/categories/index.html","excerpt":"","text":""},{"title":"","date":"2024-11-16T11:26:50.348Z","updated":"2024-11-16T11:26:50.348Z","comments":true,"path":"book/index.html","permalink":"https://www.laoliang.ink/book/index.html","excerpt":"","text":"读过（111）在读（7）想读（36） XMind：用好思维导图走上开挂人生 XMind团队 / 电子工业出版社 2022-12-21 Webpack实战：入门、进阶与调优 居玉皓 著 / 机械工业出版社 2022-10-09 深入解析 CSS Keith J. Grant / 黄小璐 / 高楠 / 人民邮电出版社 2022-10-08 JavaScript高级程序设计（第4版） [美] 马特·弗里斯比 / 李松峰 / 人民邮电出版社 / 图灵教育 2022-09-11 给青年的十二封信 朱光潜 / 东方出版中心 2022-09-02 窗边的小豆豆 （日）黑柳彻子 / 赵玉皎 / 南海出版公司 / 新经典文化 2020-07-30 ECMAScript6入门 阮一峰 / 电子工业出版社 2020-06-19 C#入门经典（第7版） [美] Benjamin Perkins / 齐立波 / 黄俊伟 / 清华大学出版社 2019-08-28 JavaScript DOM编程艺术 （第2版） [英] Jeremy Keith / [加] Jeffrey Sambells / 杨涛 / 王建桥 / 杨晓云 等 / 人民邮电出版社 2019-05-29 北方的河 张承志 / 山东文艺出版社 2019-02-18 18岁给我一个姑娘 冯唐 / 重庆出版社 2018-11-22 红玫瑰与白玫瑰 张爱玲 / 北京十月文艺出版社 / 青马文化 2018-08-29 C语言点滴 赵岩 / 人民邮电出版社 2018-08-19 中东死生门 周轶君 / 中信出版社 2018-08-11 新媒体文案创作与传播 秋叶 / 叶小鱼 / 勾俊伟 / 人民邮电出版社 2018-07-25 北京 宁肯 / 北京十月文艺出版社 / 十月文化 2018-07-20 说北京，更说一个时代的精神空缺 萤 村上春树 / 林少华 / 上海译文出版社 2018-06-22 摄影笔记 宁思潇潇 / 人民邮电出版社 2018-06-11 夏山学校 （英）尼尔 / 王克难 / 南海出版公司 2018-06-09 Java编程思想 （第4版） [美] Bruce Eckel / 陈昊鹏 / 机械工业出版社 / 华章科技 2018-06-09 沟通的艺术（插图修订第14版） 拉塞尔·F·普罗科特 / 黄素菲 / 李恩 / 世界图书出版公司 / 后浪 2018-06-09 美国数码摄影教程 （美）迪克曼（Dickma n,J） / （美）金霍恩（Kinghorn,J.） / 田彩霞 / 杨晶 / 人民邮电出版社 2018-04-22 前半部分“创作图片”，有关人文、纪实摄影的一些观念和技巧，很是受用。 正则表达式必知必会（修订版） 福达 (Ben Forta) / 杨涛 / 人民邮电出版社 / 图灵教育 2018-04-17 洪业 [美] 魏斐德 / 陈苏镇 / 薄小莹 / 新星出版社 2018-04-10 乔布斯的魔力演讲 [美]卡迈恩·加洛 / 葛志福 / 中信出版社 2018-03-26 蜂鸟摄影学院新手学摄影（入门篇） 蜂鸟网 / 人民邮电出版社 2018-03-19 美国纽约摄影学院摄影教材（上册） 美国纽约摄影学院 / 中国摄影出版社 / 中国摄影出版社 2018-03-14 斯坦福极简经济学 [美] 蒂莫西‧泰勒 / 林隆全 / 湖南人民出版社 / 博集天卷 2018-02-20 天幕红尘 豆豆 / 作家出版社 2017-12-20 施瓦辛格健身全书 [美] 阿诺德·施瓦辛格 / 万义兵 / 费海汀 / 杨婕 / 北京科学技术出版社 2017-11-28 无声告白 [美] 伍绮诗 / 孙璐 / 江苏凤凰文艺出版社 / 读客文化 2017-11-25 乡土中国 费孝通 / 人民出版社 2017-10-29 一个陌生女人的来信 [奥] 斯台芬·茨威格 / 张玉书 / 上海译文出版社 2017-10-27 灼人的秘密 茨威格 / 显克微奇 / 安德列耶夫 / 韩耀成 / 吕同六 / 山东文艺出版社 2017-10-22 边城 沈从文 / 黄永玉 卓雅 插图. / 北岳文艺出版社 2017-08-07 北京乎（上下） 姜德明 / 生活·读书·新知三联书店 2017-08-02 正红旗下 老舍 / 人民文学出版社 2017-07-16 一本书读懂TCP/IP 王元杰 / 杨波 / 周亚宁 / 陈志刚 / 人民邮电出版社 2017-06-25 Python编程快速上手 Al Sweigart / 王海鹏 / 人民邮电出版社 / 异步图书 2017-06-12 DevOps实战 [美]小特雷弗A.罗伯茨 / 姚军 / 机械工业出版社 2017-05-29 介绍了一系列DevOps工具，其中介绍Docker、jenkin、CI概念的部分对自己有帮助 树莓派用户指南 阿普顿 (Eben Upton) / 哈菲克 (Gareth Halfacree) / 人民邮电出版社 2017-05-06 基础介绍 青蛙和蟾蜍（全四册） (美)艾诺·洛贝尔 / 潘人木 / 党英台 / 明天出版社 / 信谊图画书 2017-05-05 女性的性爱动机 （美）辛迪·M·梅斯顿 / （美）戴维·M·巴斯 博士 / 海兰 / 中信出版社 2017-05-05 / ★★★★☆ 推荐 谜一样的女人。女性的性爱动机是人类动机心理学中最奇妙、最复杂、最捉摸不透的问题。。。注意到作者辛迪最后的致谢，一个人的人生道路有时候真是要感谢某些可爱的人 七周七语言 [美] Bruce A. Tate / 巨成 / 戴玮 / 白明 / 人民邮电出版社 2017-05-03 适合快速阅读，了解不同编程语言范式特点拓展知识面（以及掌握用各种语言写Hello World！😂） 特权 西莫斯·可汗 / 蔡寒韫 / 华东师范大学出版社 / 薄荷实验 2017-05-03 谁动了国家的奶酪 [法]加布里埃尔•祖克曼（Gabriel Zucman） / 杜蘅 / 华东师范大学出版社 2017-04-25 A Byte of Python Swaroop C H / Lulu Marketplace 2017-04-24 茶花女 （法）小仲马 / 王振孙 / 人民文学出版社 2017-04-17 北京：城与人 赵园 / 北京大学出版社 2017-04-13 文艺女青年这种病，生个孩子就好了 苏美 / 北京联合出版公司 2017-04-01 / ★★★★★ 力荐 书刚看完，挺赞的，他不是让你灵魂升华也不是布道是非真理歌咏人性光辉的书，他更像是坐下来拉拉家常叙叙心事，作者并没有褒贬男权女权的站队，作者想说的是无论是风花雪月还是奶屎孩子都是一种生活状态，无所谓好坏对错，自己去选择自己去经历就好～～那些短评骂作者傻逼的，估计你们都只看了个标题吧 偷影子的人 (法)马克·李维 / 段韵灵 / 湖南文艺出版社 / 博集天卷 2017-03-10 撒哈拉的故事 三毛 / 皇冠出版社 2017-03-02 洛丽塔 [美] 弗拉基米尔·纳博科夫 / 主万 / 上海译文出版社 / 上海译文新文本 2017-02-17 阿Q正传 鲁迅 著 / 丰子恺 绘 / 上海书店出版社 2017-01-17 番茄工作法图解 [瑞典] Staffan Nöteberg / 大胖 / 人民邮电出版社 2017-01-11 定西.孤儿院纪事 杨显惠 / 花城出版社 2017-01-11 失落的一代 [法] 潘鸣啸 / 欧阳因 / 中国大百科全书出版社 2016-12-18 大学 北京师范大学出版社 2016-12-14 此生未完成 于娟 / 湖南科学技术出版社 / 博集天卷 2016-12-14 人类简史 [以色列] 尤瓦尔·赫拉利 / 林俊宏 / 中信出版社 / 见识城邦 2016-12-10 三国演义 罗贯中 / 岳麓书社 2016-12-08 水浒传 施耐庵 / 罗贯中 / 人民文学出版社 2016-12-08 Pro Git (Second Edition) Scott Chacon / Ben Straub / Apress 2016-11-22 贫穷的本质 [法] 埃斯特·迪弗洛 / [印] 阿比吉特·班纳吉 / 景芳 / 中信出版社 2016-11-09 我的精神家园 王小波 / 中国人民大学出版社 2016-10-12 简爱（英文全本） [英] 夏洛蒂·勃朗特 / 世界图书出版公司 2016-09-17 第一行代码 郭霖 / 人民邮电出版社 / 图灵教育 2016-09-17 JAVA核心技术（卷1） Cay S. Horstmann / Gary Cornell / 杜永萍 / 邝劲筠 / 叶乃文 / 机械工业出版社 2016-09-17 美，看不见的竞争力 蒋勋 / 中信出版社 2016-09-17 富爸爸穷爸爸 [美] 罗伯特·T·清崎 / 南海出版公司 2016-09-17 天生就會跑 克里斯多福．麥杜格 Christopher McDougall / 克里斯托弗·麦克杜格尔 / 王亦穹 / 木馬文化事業有限公司 2016-09-17 人性的弱点全集 [美国] 戴尔·卡耐基 / 袁玲 / 中国发展出版社 2016-09-07 鹿鼎记 金庸 / 生活·读书·新知三联书店 2016-07-28 台北人 白先勇 / 上海文艺出版社 2016-07-16 温莎墓园日记 木心 / 广西师范大学出版社 / 理想国 2016-05-21 伤心咖啡馆之歌 [美] 卡森·麦卡勒斯 / 李文俊 / 上海三联书店 2016-05-07 高效能人士的七个习惯 [美] 史蒂芬·柯维 / 高新勇 / 王亦兵 / 葛雪蕾 / 中国青年出版社 2016-05-07 阿弥陀佛么么哒 大冰 / 湖南文艺出版社 / 博集天卷 2016-05-05 生死场 萧红 / 人民文学出版社 2016-04-13 旷野的呼喊 萧红 / 中国城市出版社 2016-04-13 萧红散文选集 萧红 / 百花文艺出版社 2016-04-13 黄金时代 王小波 / 陕西师范大学出版社 / 博集天卷 2016-02-27 黑客与画家 [美] Paul Graham / 阮一峰 / 人民邮电出版社 / 图灵教育 2016-02-12 围城 钱锺书 / 人民文学出版社 2016-02-12 看见 柴静 / 广西师范大学出版社 / 理想国 2016-01-21 阿勒泰的角落 李娟 / 新星出版社 / 新经典文化 2016-01-20 呼兰河传 萧红 / 百花文艺出版社 2016-01-20 你一定爱读的极简欧洲史 [澳]约翰·赫斯特（John Hirst） / 席玉苹 / 广西师范大学出版社 / 上海贝贝特 2016-01-20 追风筝的人 [美] 卡勒德·胡赛尼 / 李继宏 / 上海人民出版社 / 世纪文景 2016-01-20 尘埃落定 阿来著 / 人民文学出版社 2016-01-20 老人与海 [美]厄尼斯特•海明威 / 李继宏 / 天津人民出版社 / 果麦文化 2016-01-20 一只特立独行的猪 王小波 / 北方文艺出版社 / 华文天下 2016-01-20 甘南纪事 杨显惠 / 花城出版社 2016-01-20 白夜行 [日本] 东野圭吾 / 刘姿君 / 南海出版公司 / 新经典文化 2016-01-20 在这复杂世界里 韩寒 / 浙江文艺出版社 2016-01-20 海鸥乔纳森 [美] 理查德·巴赫 / 夏杪 / 南海出版公司 / 新经典文化 2016-01-20 解忧杂货店 [日] 东野圭吾 / 李盈春 / 南海出版公司 / 新经典文化 2016-01-20 7天治愈拖延症 丁小云 / 中国华侨出版社 2016-01-20 平凡的世界 路遥 / 人民文学出版社 2016-01-20 遇见未知的自己 张德芬 / 华夏出版社 2016-01-20 内向者优势 Marti Olsen Laney / 杨秀君 / 华东师范大学出版社 2016-01-20 早晨从中午开始 路遥 / 西北大学出版社 2016-01-20 情人 [法] 玛格丽特·杜拉斯 / 王道乾 / 上海译文出版社 / 上海译文新文本 2016-01-20 致加西亚的信 [美国] 阿尔伯特·哈伯德 / 赵立光 / 艾柯 / 哈尔滨出版社 / 华文天下 2016-01-20 挪威的森林 [日] 村上春树 / 林少华 / 上海译文出版社 2016-01-20 天才在左 疯子在右 高铭 / 武汉大学出版社 2016-01-20 爱德华的奇妙之旅 [美] 凯特·迪卡米洛 / [美]马格拉姆·伊巴图林/绘 / 王昕若 / 新蕾出版社 2016-01-20 小王子 [法国] 安东尼·德·圣-埃克苏佩里 / 马振聘 / 人民文学出版社 2016-01-20 走读鲁迅 陈光中 / 中国文史出版社 2016-01-20 如何阅读一本书 [美] 莫提默·J. 艾德勒 / 查尔斯·范多伦 / 郝明义 / 朱衣 / 商务印书馆 2016-01-20 自控力 [美] 凯利·麦格尼格尔 / 王岑卉 / 文化发展出版社(原印刷工业出版社) / 磨铁图书 2016-01-20 置身事内 兰小欢 / 上海人民出版社 / 世纪文景 2022-12-21 图解HTTP [日] 上野宣 / 于均良 / 人民邮电出版社 / 图灵教育 2022-08-19 谈判是什么 (英)盖温.肯尼迪 / 陈述 / 中国宇航出版社 2022-08-19 湘行散记 沈从文 / 长江文艺出版社 2018-11-28 天鹅绒监狱 [匈牙利] 米克洛什·哈拉兹蒂 / 戴潍娜 / 中央编译出版社 / 三辉图书 2018-04-14 红楼梦 曹雪芹 / 高鹗 / 岳麓书社 2017-03-02 马斯洛人本哲学 [美国] 马斯洛 / 成明 / 九州出版社 2016-12-10 啊哈!算法 啊哈磊 / 人民邮电出版社 2021-02-20 算法图解 [美] Aditya Bhargava / 袁国忠 / 人民邮电出版社 / 图灵教育 2021-02-20 优势谈判 罗杰•道森 (Roger Dawson) / 重庆出版社 2021-02-15 沃顿商学院最受欢迎的谈判课 [美] 斯图尔特·戴蒙德 / 杨晓红 / 中信出版社 2021-02-15 Wireshark数据包分析实战 [美]Chris Sanders / 诸葛建伟 / 陈霖 / 许伟林 / 人民邮电出版社 2020-06-25 算法（第4版） [美] Robert Sedgewick / [美] Kevin Wayne / 谢路云 / 人民邮电出版社 / 图灵教育 2020-06-15 JavaScript语言精髓与编程实践 周爱民 / 电子工业出版社 2020-06-11 反杜林论 [德] 弗里德里希·恩格斯 / 中共中央马克思恩格斯列宁斯大林著作编译局 / 人民出版社 2020-04-23 洗澡 杨绛 / 人民文学出版社 2020-04-23 CSS揭秘 [希] Lea Verou / CSS魔法 / 人民邮电出版社 2019-11-18 现实不似你所见 [意] 卡洛·罗韦利 / 杨光 / 湖南科学技术出版社 / 博集天卷 2019-08-11 第一本Docker书（修订版） 詹姆斯·特恩布尔 (James Turnbull) / 李兆海 / 刘斌 / 巨震 / 人民邮电出版社 2019-04-02 Spring Cloud微服务实战 翟永超 / 电子工业出版社 / 博文视点 2019-04-02 高性能MySQL(第3版) 施瓦茨 (Baron Schwartz) / 扎伊采夫 (Peter Zaitsev) / 特卡琴科 (Vadim Tkachenko) / 宁海元 / 周振兴 / 彭立勋 / 翟卫祥 / 刘辉 / 电子工业出版社 2019-04-02 深入理解Java虚拟机（第2版） 周志明 / 机械工业出版社 2019-04-02 思考，快与慢 [美国] 丹尼尔·卡尼曼 / [美国] Daniel Kahneman / 胡晓姣 / 李爱民 / 何梦莹 / 中信出版社 2018-10-12 黑天鹅 纳西姆•尼古拉斯•塔勒布 (Nassim Nicholas Taleb) / 万丹 / 刘宁 / 中信出版社 2018-10-12 亲密关系（第6版） [美] 罗兰·米勒 (Rowland S. Miller) / 王伟平 译 / 彭凯平 校 / 人民邮电出版社 2018-08-22 存在主义心理治疗 [美国] 欧文·亚隆 / 黄峥 / 张怡玲 / 沈东郁 / 商务印书馆 2018-08-13 北方的空地 杨柳松 / 重庆出版社 2018-02-17 经济学通识课 [英] 尼尔·基什特尼 / 张缘 / 刘婧 / 民主与建设出版社 / 博集天卷 2018-02-01 中国哲学简史 冯友兰 / 赵复三 / 生活·读书·新知三联书店 2017-12-27 自卑与超越 阿尔弗雷德·阿德勒 / 曹晚红 / 魏雪萍 / 汕头大学出版社 2017-12-27 动物凶猛 王朔 / 中国电影出版社 2017-10-29 马丁·伊登 （美）杰克・伦敦 / 殷惟本 / 人民文学出版社 2017-09-26 我见 [法]马克·吕布 / 孟蕤 / 世界图书出版公司 / 后浪 2017-09-21 自然笔记 芮东莉 / 中信出版社 2017-06-12 是什么带来力量 [德国] 卢安克 / 中国致公出版社 2017-05-18 给教师的建议 [苏] B.A. 苏霍姆林斯基 / 杜殿坤 编译 / 教育科学出版社 2017-05-08 窗边的小豆豆 [日] 黑柳彻子 著 / 岩崎千弘 图 / 赵玉皎 / 南海出版公司 / 新经典文化 2017-05-08 堂吉诃德 塞万提斯 / 屠孟超 / 屠孟超 / 译林出版社 2017-04-09 悲惨世界 雨果 / 李玉民 / 北京燕山出版社 2017-04-09 江村经济 费孝通 / 上海人民出版社 2017-02-17 浮生六记 （清）沈复 / 人民文学出版社 2017-02-14 国家精英 [法]P.布尔迪厄 / 杨亚平 / 商务印书馆 2017-01-12 傅雷家书 傅雷 / 生活·读书·新知三联书店 2017-01-12 #book-by-douban .nav-tabs .tab a { font-size: 0.9rem; line-height: 1.4rem; color: #41ac91; transition: all 0.28s ease; } #book-by-douban .nav-tabs .active a { font-size: 0.9375rem; color: #44d7b6; } #book-by-douban .nav-tabs .tab a:hover { color: #ff5722; } .hexo-douban-tabs { margin-bottom: 15px; margin-top: 15px; } .hexo-douban-tab { padding: 5px; text-decoration: none !important; } .hexo-douban-active { background: #657b83; color: #fff !important; } .hexo-douban-item { position: relative; clear: both; min-height: 170px; padding: 10px 0; border-bottom: 1px #ddd solid; } @media screen and (max-width: 600px) { .hexo-douban-item { width: 100%; } } .hexo-douban-picture { position: absolute; left: 0; top: 10px; width: 100px; } .hexo-douban-info { padding-left: 120px; } .hexo-douban-meta { font-size: 12px; padding-right: 10px; } .hexo-douban-comments { font-size: 12px; } .hexo-douban-pagination { margin-top: 15px; text-align: center; margin-bottom: 10px; } .hexo-douban-button { padding: 5px; text-decoration: none !important; } .hexo-douban-button:hover { background: #657b83; color: #fff !important; opacity: 1; } .hexo-douban-hide { display: none; } .hexo-douban-show { display: block; }"},{"title":"标签","date":"2024-11-16T11:26:50.348Z","updated":"2024-11-16T11:26:50.348Z","comments":true,"path":"tags/index.html","permalink":"https://www.laoliang.ink/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"快速入门脚手架(Node.js CLI)开发","slug":"极速入门脚手架(Node.js CLI)开发","date":"2024-05-04T13:19:10.000Z","updated":"2024-11-16T11:26:50.346Z","comments":true,"path":"posts/20240504211910/","link":"","permalink":"https://www.laoliang.ink/posts/20240504211910/","excerpt":"","text":"开发一个 Node.js CLI 脚手架，是创建高效开发工具的重要一步。本文将从基础概念入手，逐步深入开发过程，并以最小依赖实现第一个 CLI 工具。 一、基础概念与预备知识1. 什么是 Shell 和 Bash？ Shell：操作系统的命令解释器，允许用户与系统进行交互。常见的 Shell 包括 Bash、zsh、fish 等。 Bash (Bourne Again Shell)：是 Linux 和 macOS 默认的 Shell，提供了丰富的命令和脚本支持。 Shell 脚本允许自动化任务，许多 CLI 工具的核心逻辑往往需要与 Shell 交互。 2. 什么是 CLI 与 GUI？ CLI（Command Line Interface，命令行接口）：用户通过命令输入与程序交互，如 git 或 npm。 GUI（Graphical User Interface，图形用户界面）：用户通过窗口和按钮与系统交互，如 VSCode。 CLI 工具的优势在于： 自动化程度高、支持脚本化操作。 高效处理批量任务，开发时可远程执行。 二、脚手架开发的预备知识1. 了解 Node.js 的能力 Node.js 提供内置模块（如 fs、child_process 等），适合开发 CLI。 Node.js 支持同步与异步 API，CLI 通常选择同步执行关键任务，确保顺序执行。 2. package.json 的 bin 字段在 package.json 中配置 bin 字段，让你的脚手架可以全局执行。 123&quot;bin&quot;: &#123; &quot;my-cli&quot;: &quot;./index.js&quot;&#125; 三、开发第一个脚手架1. 初始化项目123mkdir my-cli &amp;&amp; cd my-clinpm init -ytouch index.js 2. 在 index.js 中实现基础 CLI1234567891011#!/usr/bin/env nodeconst [,, command, ...args] = process.argv;switch (command) &#123; case &#x27;greet&#x27;: console.log(`Hello, $&#123;args[0] || &#x27;World&#x27;&#125;!`); break; default: console.log(&#x27;Usage: my-cli greet &lt;name&gt;&#x27;);&#125; 解释 const [,, command, ...args] = process.argv; 这行代码利用了 解构赋值，用于从 process.argv 中提取命令和参数。我们逐步解析这一部分代码，并解释为什么 command 前面有两个逗号。 process.argv 是一个数组，包含运行 Node.js 脚本时传入的所有命令行参数。其中： 第 0 个元素：Node.js 可执行文件的路径（如 /usr/local/bin/node）。 第 1 个元素：正在执行的脚本路径（如 /Users/alice/my-cli/index.js）。 第 2 个元素及之后：用户传入的命令和参数。 示例： 如果用户运行如下命令： 1node index.js greet Alice 那么 process.argv 的值将是： 123456[ &#x27;/usr/local/bin/node&#x27;, // 第 0 个元素 &#x27;/Users/alice/my-cli/index.js&#x27;, // 第 1 个元素 &#x27;greet&#x27;, // 第 2 个元素（命令） &#x27;Alice&#x27; // 第 3 个元素（参数）] 在 Node.js 中运行脚本时，第 0 个和第 1 个元素分别是 Node.js 可执行文件和脚本的路径。 对于命令行工具，我们通常不需要这两个路径，因此直接跳过。 3. 本地测试1./index.js greet Alice 4. 配置全局运行在 package.json 中添加 bin 字段： 123&quot;bin&quot;: &#123; &quot;my-cli&quot;: &quot;./index.js&quot;&#125; 使用 npm link 进行本地测试： 12npm linkmy-cli greet Bob 四、核心原生实现1. 读取用户输入（process.argv）Node.js 的 process.argv 提供命令行参数的访问能力： 12const args = process.argv.slice(2);console.log(`Arguments: $&#123;args.join(&#x27; &#x27;)&#125;`); 2. 文件系统操作（fs 模块）创建和写入文件： 1234const fs = require(&#x27;fs&#x27;);fs.writeFileSync(&#x27;hello.txt&#x27;, &#x27;Hello, Node.js CLI!&#x27;);console.log(&#x27;File created: hello.txt&#x27;); 3. 执行系统命令（child_process 模块）通过 Shell 执行命令： 1234const &#123; execSync &#125; = require(&#x27;child_process&#x27;);const result = execSync(&#x27;ls&#x27;).toString();console.log(result); 4. 处理用户交互（readline 模块）简单实现用户输入： 1234567891011const readline = require(&#x27;readline&#x27;);const rl = readline.createInterface(&#123; input: process.stdin, output: process.stdout&#125;);rl.question(&#x27;What is your name? &#x27;, (answer) =&gt; &#123; console.log(`Hello, $&#123;answer&#125;!`); rl.close();&#125;); 五、第三方库与框架介绍1. commander：简化命令和参数处理。1npm install commander 12345678910const &#123; Command &#125; = require(&#x27;commander&#x27;);const program = new Command();program .version(&#x27;1.0.0&#x27;) .command(&#x27;greet &lt;name&gt;&#x27;) .description(&#x27;Say hello to someone&#x27;) .action((name) =&gt; console.log(`Hello, $&#123;name&#125;!`));program.parse(process.argv); 2. inquirer：增强用户交互体验。1npm install inquirer 12345const inquirer = require(&#x27;inquirer&#x27;);inquirer.prompt([ &#123; type: &#x27;input&#x27;, name: &#x27;username&#x27;, message: &#x27;What is your name?&#x27; &#125;]).then(answers =&gt; console.log(`Hello, $&#123;answers.username&#125;!`)); 3. chalk：为终端输出添加颜色。1npm install chalk 12const chalk = require(&#x27;chalk&#x27;);console.log(chalk.green(&#x27;Success!&#x27;)); 六、总结开发 CLI 脚手架并不复杂，只需掌握 Node.js 基础模块即可实现很多功能。在此基础上，你可以根据项目需求引入第三方库来增强用户体验。以下是脚手架开发的流程回顾： 基础概念：理解 Shell、Bash、CLI 与 GUI 的区别。 项目初始化：配置 package.json 的 bin 字段。 核心实现：使用 process.argv、fs、child_process 等原生模块。 扩展功能：根据需要引入第三方库（如 commander 和 inquirer）。 最后，分享一个自己开发的 Node.js CLI 工具： douban-scanner —— 豆瓣扫描器，一个用来抓取豆瓣 “书影音” 数据的 CLI 工具","categories":[{"name":"未分类","slug":"未分类","permalink":"https://www.laoliang.ink/categories/%E6%9C%AA%E5%88%86%E7%B1%BB/"}],"tags":[{"name":"无标签","slug":"无标签","permalink":"https://www.laoliang.ink/tags/%E6%97%A0%E6%A0%87%E7%AD%BE/"}]},{"title":"从 Dark 看编程语言空安全特性","slug":"从-Dark-看编程语言空安全特性","date":"2023-11-09T11:39:41.000Z","updated":"2024-11-16T11:26:50.330Z","comments":true,"path":"posts/20231109193941/","link":"","permalink":"https://www.laoliang.ink/posts/20231109193941/","excerpt":"","text":"前段时间想做一个小工具 APP，考虑想用 Flutter 实现，于是去看了看 Dart 语言，发现一个比较有意思的特性 —— “空安全”，这里和大家聊一聊。 什么是空安全空安全是指编程语言的类型系统能够区分可为空的类型和不能为空的类型，这种区别可以防止空引用错误（Null Reference Errors）。 Dart 的空安全Dart 在 2.12 版本引入了空安全。 可空和非空类型在 Dart 中，所有类型默认都是非空的。例如，如果你声明一个 String 类型的变量，Dart 会假设它永远不会为空： 且不能将它赋予 null 值： 如果你想声明一个可以为空的 String，你需要在类型后面加上 ?： 处理可空值与 JS 类似，Dart 也提供了几种方式来处理可能为空的值。 例如，可以使用 ?? 操作符来提供一个默认值： 可以使用 ?. 操作符，在对象为空时，跳过方法调用或属性访问，避免抛出空引用错误： 针对上面这种情况，如果编译器解析出你去访问一个可能为空的对象的属性或方法时，没有使用 ?. 操作符，这会在编译时就会报错，避免了运行时才暴露问题： 空值断言操作符 ! 的使用当我们排除变量或参数的可空的可能后，可以通过 ! 来告诉编译器这个可空的变量或者参数不可空，这对我们进行方法传参或将可空的参数传递给一个不可空的入参时特别有用。 引用 Dart 文档中的一个例子⬇️：（From：Dart｜ 空值断言操作符） 由于 error 属性是可空的，在返回结果成功时，它不会有值。我们通过仔细观察类可以看出，当消息为空时，我们永远不会访问 error。但为了知晓这个行为，必须要理解 code 的值与 error 的可空性之间的联系。类型检查器看不出这种联系。 换句话说，作为代码的人类维护者，我们知道在使用 error 时，它的值不会是 null，并且我们需要对其进行断言。通常你可以通过使用 as 转换来断言类型，这里你也可以这样做： 编译时的报错消失了！⬆️ 如果在运行时，将 error 转换为非空的 String 类型出现了无法转换的错误，会抛出一个异常。若转换成功，一个非空的字符串就会回到我们的手上，让我们可以进行方法调用。 “排除可空性的转换”的场景频繁出现，这促使了 Dart 带来了新的短小精悍的语法。一个作为后缀的感叹号标记 (!) 会让左侧的表达式转换成其对应的非空类型。所以上面的函数等效于： 当原有的类型非常繁琐的时候，这个只有一个字符的 “! 操作符” 就会非常顺手。如果仅仅是为了将一个类型转换为非空，就需要写出类似于 as Map&lt;TransactionProviderFactory, List&lt;Set&lt;ResponseFilter&gt;&gt;&gt; 这样的代码，会让这个过程变得非常烦人。 TypeScript 开启严格空值检查 目前很多主流编程语言都对空安全有自己的支持，比如：Kotlink、Swift、Rust，包括我们熟悉的 TypeScript，其实也可以手动开启严格空值检查。 TypeScript 里，JS 中的基本数据类型 undefined 和 null 两者各自有自己的类型分别叫做 undefined 和 null。 默认情况下 null 和 undefined 是所有类型的子类型。 就是说你可以把 null 和 undefined 赋值给 number 类型的变量。 例如下面的代码，在 TS 中是完全可以执行的： strictNullChecksTypeScript 2.0 增加了对 不可为空类型 的支持。有一种新的 严格空值检查 模式，他提供了 strictNullChecks 来限制对空值的检查，可以通过在命令行上添加 --strictNullChecks 参数来启功严格空值检查，也可以在项目的 tsconfig.json **文件中启用 strictNullChecks 编译器选项。 在TS中，为了各版本的兼容，strictNullChecks 的默认值是 false，我们需要手动设置为 true： 123456&#123; &quot;compilerOptions&quot;: &#123; &quot;strictNullChecks&quot;: true // ... &#125;&#125; 此时，我们刚刚的代码，就无法通过编译器检查了： 变量如何可以为空开启严格空值检查后，如果我们想要一个变量可以接受空值，我们该怎么办呢？ 使用联合类型 比如下面的代码，username 可以接受 null 类型的值，但是无法接受 undefined 的值： 在 Object 中使用 ? 可选属性 首先，联合类型可以在 Object 中使用： 这里我们设置 age 的类型为 number 和 undefined，下面的两种用法都是正确的： 如果我们想要下面的效果，不需要手动给 age 赋值： 此时我们就需要用到 ? 来使属性成为可选，这样我们就可以完全省略 age 属性的定义。 在这种情况下：undefined 类型会自动添加到联合类型中。因此，以下所有赋值都是正确的： 引入空安全的好处 可以将原本运行时的空值引用错误，变为编译时的分析错误 增强程序的健壮性，有效避免由Null而导致的崩溃 由于空安全特性的存在，编译层面可以做很多优化","categories":[{"name":"未分类","slug":"未分类","permalink":"https://www.laoliang.ink/categories/%E6%9C%AA%E5%88%86%E7%B1%BB/"}],"tags":[{"name":"无标签","slug":"无标签","permalink":"https://www.laoliang.ink/tags/%E6%97%A0%E6%A0%87%E7%AD%BE/"}]},{"title":"客户端与服务器即时通信的几种实现方式","slug":"客户端与服务器即时通信的几种实现方式","date":"2023-10-19T14:19:11.000Z","updated":"2024-11-16T11:26:50.330Z","comments":true,"path":"posts/20231019221911/","link":"","permalink":"https://www.laoliang.ink/posts/20231019221911/","excerpt":"","text":"1. 轮询（Polling）—— 简单直接的老方法轮询是一种最基础的通信方式，客户端定期向服务器发送 HTTP 请求，询问是否有新数据。 实现示例123456// 每隔5秒轮询一次服务器是否有新消息setInterval(async () =&gt; &#123; const response = await fetch(&#x27;/api/messages&#x27;); const data = await response.json(); console.log(&#x27;新消息:&#x27;, data);&#125;, 5000); 优缺点分析 优点：简单易用，所有浏览器都支持。 缺点：响应不及时，浪费带宽，服务器压力大。 适用场景：对实时性要求不高的项目，如低频更新的系统状态检查。 2. 长轮询（Long Polling）—— 聊天系统的好搭档长轮询是轮询的升级版：客户端发起请求后，如果服务器暂时没有数据，不会立即返回响应，而是等到有新数据时才返回。 实现示例1234567891011121314// 长轮询请求示例async function longPoll() &#123; try &#123; const response = await fetch(&#x27;/api/messages&#x27;); const data = await response.json(); console.log(&#x27;收到消息:&#x27;, data); &#125; catch (error) &#123; console.error(&#x27;连接错误:&#x27;, error); &#125; finally &#123; // 收到消息或连接断开后，立即发起下一次请求 longPoll(); &#125;&#125;longPoll(); 优缺点分析 优点：比传统轮询更高效，减少了不必要的请求。 缺点：服务器需要长时间维护连接，对资源占用较高。 适用场景：适用于需要准实时响应的聊天系统或通知系统。 3. WebSocket —— 全双工通信的利器WebSocket 是一种基于 TCP 的全双工通信协议，允许客户端和服务器之间建立持久连接，双方可以互相主动发送数据。 实现示例客户端代码： 12345678910111213141516const socket = new WebSocket(&#x27;wss://example.com/socket&#x27;);// 监听服务器消息socket.onmessage = (event) =&gt; &#123; console.log(&#x27;收到消息:&#x27;, event.data);&#125;;// 发送消息给服务器socket.onopen = () =&gt; &#123; socket.send(&#x27;Hello, Server!&#x27;);&#125;;// 处理错误socket.onerror = (error) =&gt; &#123; console.error(&#x27;WebSocket 错误:&#x27;, error);&#125;; 优缺点分析 优点：双向通信，实时性极高，适合高并发应用。 缺点：需要服务器支持 WebSocket，客户端实现也较复杂。 适用场景：在线游戏、实时协作工具、股票交易系统等对实时性要求极高的应用。 4. 服务器推送事件（Server-Sent Events, SSE）—— 简单的单向推送SSE 允许服务器主动推送数据给客户端，客户端只需建立一次连接。这是一个基于 HTTP 协议的单向通信方式。 实现示例服务器端（Node.js 示例）： 12345678910111213const http = require(&#x27;http&#x27;);http.createServer((req, res) =&gt; &#123; res.writeHead(200, &#123; &#x27;Content-Type&#x27;: &#x27;text/event-stream&#x27;, &#x27;Cache-Control&#x27;: &#x27;no-cache&#x27;, &#x27;Connection&#x27;: &#x27;keep-alive&#x27; &#125;); setInterval(() =&gt; &#123; res.write(`data: $&#123;new Date().toLocaleTimeString()&#125;\\n\\n`); &#125;, 1000);&#125;).listen(3000);console.log(&#x27;SSE 服务器已启动，监听端口 3000&#x27;); 客户端代码： 12345const eventSource = new EventSource(&#x27;/sse&#x27;);eventSource.onmessage = (event) =&gt; &#123; console.log(&#x27;收到服务器推送:&#x27;, event.data);&#125;; 优缺点分析 优点：实现简单，支持自动重连，节省带宽。 缺点：只支持单向通信，客户端无法主动发送数据。 适用场景：实时新闻推送、数据监控面板。 5. HTTP/2 Push —— 优化资源加载的新选择HTTP/2 Push 是 HTTP/2 协议中的一项功能，允许服务器在客户端请求前主动推送资源。 优缺点分析 优点：减少延迟，提高页面加载速度。 缺点：浏览器和服务器必须都支持 HTTP/2。 适用场景：主要用于优化前端资源加载，例如预加载 CSS 或 JavaScript 文件。 总结：如何选择合适的即时通信方案？ 方案 优点 缺点 适用场景 轮询 简单直接 浪费带宽，响应不及时 低频数据刷新 长轮询 相对高效 服务器资源占用较高 聊天系统、通知系统 WebSocket 双向通信，实时性高 实现复杂 在线游戏、协作工具 SSE 实现简单，支持自动重连 单向通信 数据监控、实时新闻 HTTP/2 Push 优化资源加载 需要 HTTP/2 支持 前端性能优化","categories":[{"name":"未分类","slug":"未分类","permalink":"https://www.laoliang.ink/categories/%E6%9C%AA%E5%88%86%E7%B1%BB/"}],"tags":[{"name":"无标签","slug":"无标签","permalink":"https://www.laoliang.ink/tags/%E6%97%A0%E6%A0%87%E7%AD%BE/"}]},{"title":"JavaScript 浮点数与 0 按位或，实现舍弃小数位取整","slug":"JavaScript 浮点数与 0 按位或，实现舍弃小数位去整","date":"2023-06-07T11:12:36.000Z","updated":"2024-11-16T11:26:50.329Z","comments":true,"path":"posts/20230607191236/","link":"","permalink":"https://www.laoliang.ink/posts/20230607191236/","excerpt":"","text":"今天工作时，在项目中发现一处有趣的 JavaScript 代码，它将一个浮点数与 0，进行了一个 按位或 运算。开始还不清楚所谓何意，后来通过测试和查证才知道。 原来，使用 按位或运算符 (|) 可以将浮点数转为整数，并舍弃小数部分。这是因为按位操作会将数字隐式转换为 32 位整数，从而舍弃小数部分。示例代码如下： 123let num = 5.67;let result = num | 0; // 按位或运算console.log(result); // 输出: 5 原理： 按位或 (|) 运算符会将操作数转换为32位有符号整数。 浮点型的小数部分在转换过程中会被截断，而不是四舍五入。 优点： 性能好：比 Math.floor()、parseInt() 等函数更快。 简洁：代码简单，易于书写。 注意事项： 只能处理 32位整数范围内的数值 （即：-2^31 到 2^31 - 1）。对于超出此范围的数，结果可能不准确。 如果需要 向下取整 或处理 负数，可以改用 Math.floor()： 12console.log(-5.67 | 0); // 输出: -5console.log(Math.floor(-5.67)); // 输出: -6 结论： 所以，num | 0 确实是一种快速、简便的方式来舍弃小数部分取整，但要注意其处理负数的行为和范围限制。","categories":[{"name":"未分类","slug":"未分类","permalink":"https://www.laoliang.ink/categories/%E6%9C%AA%E5%88%86%E7%B1%BB/"}],"tags":[{"name":"无标签","slug":"无标签","permalink":"https://www.laoliang.ink/tags/%E6%97%A0%E6%A0%87%E7%AD%BE/"}]},{"title":"macOS - 给 Terminal(终端)配置网络代理","slug":"macOS-给-Terminal-终端-配置网络代理","date":"2023-01-02T09:21:53.000Z","updated":"2024-11-16T11:26:50.329Z","comments":true,"path":"posts/20230102172153/","link":"","permalink":"https://www.laoliang.ink/posts/20230102172153/","excerpt":"","text":"与浏览器不同，mac 的终端默认并没有开启代理模式，也就是说即使我们电脑安装了代理客户端，在终端中也是无法使用代理的。下面通过样例演示如何对终端配置网络代理。 1. 确定客户端端口首先我们打开使用的代理客户端设置界面，查看其开放的 HTTP 端口，比如我这里是 1087 2. 配置代理macOS Catalina 之后，Mac 使用 zsh 作为默认的 Shell 终端，我们这里就以 zsh 配置为例展示配置方法。 修改 ~/.zshrc 配置文件 1vim ~/.zshrc 向其中添加如下内容： 123# Turn on and off all_proxyalias proxy=&quot;export all_proxy=http://127.0.0.1:1087 &amp;&amp; echo &#x27;Already turn on all_proxy to http://127.0.0.1:1087&#x27;&quot;alias unproxy=&quot;unset all_proxy &amp;&amp; echo &#x27;Already turn off all_proxy&#x27;&quot; 保存退出 vim 后，执行如下命令，使配置生效 1source ~/.zshrc 3. 测试首先我们使用 curl 命令查看终端目前的 IP： 1curl ipinfo.io 得到类似下面的结果，可以看出确实使用的是国内的 IP 地址： 1234567&#123; &quot;ip&quot;: &quot;...&quot;, &quot;region&quot;: &quot;Guangdong&quot;, &quot;country&quot;: &quot;CN&quot;, &quot;timezone&quot;: &quot;Asia/Shanghai&quot;, // ...&#125; 接着我们执行 proxy 命令开启终端代理模式（仅针对当前会话生效）： 1proxy 再次使用 curl 命令查看可以发现变成了国外的 IP（代理服务器的 IP）： 1234567&#123; &quot;ip&quot;: &quot;...&quot;, &quot;region&quot;: &quot;Tokyo&quot;, &quot;country&quot;: &quot;JP&quot;, &quot;timezone&quot;: &quot;Asia/Tokyo&quot;, // ...&#125; 如果需要关闭代理模式，执行如下命令即可： 1unproxy","categories":[{"name":"未分类","slug":"未分类","permalink":"https://www.laoliang.ink/categories/%E6%9C%AA%E5%88%86%E7%B1%BB/"}],"tags":[{"name":"无标签","slug":"无标签","permalink":"https://www.laoliang.ink/tags/%E6%97%A0%E6%A0%87%E7%AD%BE/"}]},{"title":"如何减少关键路径渲染（Critical Rendering Path）","slug":"如何减少关键路径渲染（Critical Rendering Path）","date":"2022-11-22T15:13:11.000Z","updated":"2024-11-16T11:26:50.329Z","comments":true,"path":"posts/20221122231311/","link":"","permalink":"https://www.laoliang.ink/posts/20221122231311/","excerpt":"","text":"关键路径渲染（Critical Rendering Path，CRP） 是指浏览器将 HTML、CSS 和 JavaScript 解析为可视页面的过程。CRP 的优化直接影响 页面的首次内容呈现时间 和用户的 加载体验。在现代前端开发中，减少关键路径渲染的时间已成为提升网页性能的关键环节。本文将逐步讲解 CRP 的工作原理，并提供实用的优化策略。 一、什么是关键路径渲染（CRP）？浏览器渲染页面的过程大致如下： HTML 解析为 DOM 树：浏览器逐行解析 HTML 代码，构建 DOM（Document Object Model）树。 CSS 解析为 CSSOM 树：同时解析 CSS，构建 CSSOM（CSS Object Model）树。 合并 DOM 和 CSSOM 树：生成渲染树（Render Tree），决定哪些元素可见。 布局和绘制：浏览器计算元素的位置和大小（布局），然后将其绘制到屏幕。 如果某些资源（如 JS 或 CSS 文件）未及时加载并阻塞了这个过程，就会延长页面的首屏呈现时间，导致用户体验下降。 二、如何减少关键路径渲染的时间？减少 CRP 的时间，主要依赖减少资源体积、缩短加载时间和优化资源的解析顺序。以下是一些行之有效的优化策略。 1. 减少阻塞资源1.1 延迟加载 JavaScriptJavaScript 文件会阻塞 HTML 的解析，因此可以使用 defer 或 async 来延迟脚本加载。 12345&lt;!-- 使用 async 加载，脚本下载完成后立即执行 --&gt;&lt;script src=&quot;script.js&quot; async&gt;&lt;/script&gt;&lt;!-- 使用 defer 加载，脚本在 HTML 解析完成后执行 --&gt;&lt;script src=&quot;script.js&quot; defer&gt;&lt;/script&gt; 推荐：将不影响页面首屏展示的 JS 脚本标记为 defer。 1.2 内联关键 CSS将首屏展示所需的 CSS内联到 HTML 中，减少 CSS 文件的加载延迟。 1234&lt;style&gt; body &#123; margin: 0; font-family: sans-serif; &#125; .hero &#123; background-color: #4CAF50; height: 100vh; &#125;&lt;/style&gt; 2. 压缩和优化资源2.1 使用 Gzip 或 Brotli 压缩启用服务器端压缩，减少 HTML、CSS 和 JavaScript 文件的传输体积。 123# 在 nginx 配置中启用 Gzipgzip on;gzip_types text/plain text/css application/javascript; 2.2 使用 Tree Shaking 和代码拆分通过 Tree Shaking 移除未使用的代码，并利用代码拆分减少首次加载的资源量。 123// Tree Shaking 示例，只打包实际使用的函数import &#123; usedFunction &#125; from &#x27;./utils&#x27;;usedFunction(); 3. 优化 CSS 和字体加载3.1 减少 CSS 文件体积 删除未使用的 CSS。 使用 CSS 压缩工具（如 cssnano）。 3.2 使用字体加载优化使用 font-display: swap 避免字体阻塞渲染。 12345@font-face &#123; font-family: &#x27;CustomFont&#x27;; src: url(&#x27;custom-font.woff2&#x27;) format(&#x27;woff2&#x27;); font-display: swap;&#125; 4. 使用缓存提升加载速度 启用浏览器缓存：设置 HTTP 头，如 Cache-Control 和 ETag，确保静态资源被缓存。 使用 Service Worker：利用 PWA 技术，将资源缓存到本地，提高页面的离线访问能力。 5. 优先加载关键资源5.1 使用 预加载关键资源，确保它们尽快开始下载。 12&lt;link rel=&quot;preload&quot; href=&quot;styles.css&quot; as=&quot;style&quot;&gt;&lt;link rel=&quot;preload&quot; href=&quot;script.js&quot; as=&quot;script&quot;&gt; 5.2 使用 为非关键资源使用预获取策略，提高后续页面加载速度。 1&lt;link rel=&quot;prefetch&quot; href=&quot;next-page.html&quot;&gt; 6. 减少重排与重绘 避免频繁操作 DOM：合并多次 DOM 修改，减少重排开销。 使用 CSS 动画代替 JavaScript 动画：CSS 动画通常性能更好。 避免触发 Layout Thrashing：避免在 JS 中频繁读取和写入 DOM 属性。 三、常见问题与解决方案问题 1：如何判断哪些资源属于关键资源？解决方案：使用 Chrome DevTools 的“性能面板”查看加载的资源，并标记延迟页面渲染的关键资源。 问题 2：如何避免字体加载造成的闪烁（FOIT）？解决方案：为字体添加 font-display: swap，让浏览器使用系统字体进行替代，直至自定义字体加载完成。 问题 3：如何减少第三方库对渲染的影响？解决方案： 使用 async 或 defer 延迟加载第三方 JS 脚本，如广告、分析工具等。 利用动态导入按需加载部分第三方依赖。 使用轻量替代库，如用 day.js 替代 moment.js。 问题 4：如何避免图片加载影响页面首屏渲染？解决方案： 使用 lazyload 延迟加载首屏外的图片。 将小图片转换为 Base64 格式内联到 HTML 中，减少 HTTP 请求。 使用 srcset 和 sizes 优化响应式图片加载。 问题 5：如何优化首次访问与返回访问的性能差异？解决方案： 配置 Service Worker 将关键资源缓存到本地，缩短后续访问时间。 使用 HTTP/2 或 HTTP/3 多路复用技术，提升首次访问时的资源加载速度。 问题 6：如何监控并持续优化 CRP？解决方案： 使用 Lighthouse 或 Web Vitals 插件定期生成性能报告。 集成 Google Analytics 的 First Input Delay (FID) 指标，实时分析页面交互性能。 持续关注 CLS（Cumulative Layout Shift），减少布局偏移问题。 四、总结减少关键路径渲染时间对于提升网页性能和用户体验至关重要。通过减少阻塞资源、压缩和优化资源、优先加载关键内容和减少重排与重绘，我们可以有效缩短页面的首次内容呈现时间。 在实际项目中，优化 CRP 是一个持续的过程。建议借助 Chrome DevTools 等工具，实时监控性能瓶颈，并逐步优化。优化后的页面不仅能显著提升加载速度，也能提高用户的访问体验，带来更高的转化率。","categories":[{"name":"未分类","slug":"未分类","permalink":"https://www.laoliang.ink/categories/%E6%9C%AA%E5%88%86%E7%B1%BB/"}],"tags":[{"name":"无标签","slug":"无标签","permalink":"https://www.laoliang.ink/tags/%E6%97%A0%E6%A0%87%E7%AD%BE/"}]},{"title":"手动实现 JavaScript 迭代器","slug":"手动实现 JavaScript 迭代器","date":"2022-11-21T12:33:23.000Z","updated":"2024-11-16T11:26:50.329Z","comments":true,"path":"posts/20221121203323/","link":"","permalink":"https://www.laoliang.ink/posts/20221121203323/","excerpt":"","text":"在 JavaScript 中，迭代器是一个非常强大的工具。它允许我们逐步遍历集合中的元素，如数组、字符串、Map 等。然而，除了使用内置的迭代器（如 for…of、Array.prototype.entries() 等），我们还可以手动实现自己的迭代器来满足特殊需求。今天我们就从零开始，逐步带你了解如何实现一个 JavaScript 迭代器。 一、什么是迭代器？迭代器的本质是一个对象，它提供了一种标准化的访问数据的方法。它需要具备两个关键要素： next() 方法： 每次调用时，返回一个包含 value 和 done 属性的对象。 状态跟踪： 用于记录当前迭代的进度。 返回的对象结构为： 1&#123; value: &lt;当前值&gt;, done: &lt;是否结束&gt; &#125; value 表示当前迭代项的值。 done 是一个布尔值，用于表示迭代是否结束。 二、内置迭代器的简单例子在继续之前，我们先来看一个数组的内置迭代器： 1234567const arr = [1, 2, 3];const iterator = arr[Symbol.iterator]();console.log(iterator.next()); // &#123; value: 1, done: false &#125;console.log(iterator.next()); // &#123; value: 2, done: false &#125;console.log(iterator.next()); // &#123; value: 3, done: false &#125;console.log(iterator.next()); // &#123; value: undefined, done: true &#125; 这里我们使用了数组的内置 Symbol.iterator 方法。每次调用 next() 都会依次获取数组的下一个元素，直到所有元素遍历完成。 三、手动实现一个简单的迭代器我们现在尝试手动实现一个基本的迭代器。目标是实现一个能遍历数组的自定义迭代器。 1234567891011121314151617181920function createArrayIterator(arr) &#123; let index = 0; return &#123; next() &#123; if (index &lt; arr.length) &#123; return &#123; value: arr[index++], done: false &#125;; &#125; else &#123; return &#123; value: undefined, done: true &#125;; &#125; &#125; &#125;;&#125;const iterator = createArrayIterator([10, 20, 30]);console.log(iterator.next()); // &#123; value: 10, done: false &#125;console.log(iterator.next()); // &#123; value: 20, done: false &#125;console.log(iterator.next()); // &#123; value: 30, done: false &#125;console.log(iterator.next()); // &#123; value: undefined, done: true &#125; 代码说明： createArrayIterator 函数接收一个数组作为参数。 每次调用 next()，都会返回当前数组元素并将索引前进一位。 当数组遍历完成后，返回 { value: undefined, done: true }。 四、为对象添加迭代器我们可以通过 Symbol.iterator 为任何对象定义自定义的迭代逻辑。这样，我们的对象也能在 for…of 循环中使用。下面，我们为一个自定义对象实现迭代器。 1234567891011121314151617181920212223const range = &#123; start: 1, end: 5, [Symbol.iterator]() &#123; let current = this.start; const end = this.end; return &#123; next() &#123; if (current &lt;= end) &#123; return &#123; value: current++, done: false &#125;; &#125; else &#123; return &#123; value: undefined, done: true &#125;; &#125; &#125; &#125;; &#125;&#125;;for (const num of range) &#123; console.log(num); // 输出 1 2 3 4 5&#125; 代码说明： range 对象表示一个范围，从 start 到 end。 在对象内部使用 Symbol.iterator 定义了一个迭代器。 for…of 会自动调用对象的 Symbol.iterator 方法来获取迭代器。 五、实现无限迭代器有时候，我们需要创建一个无限序列，比如生成斐波那契数列。下面是一个无限斐波那契迭代器的实现： 123456789101112131415161718function fibonacciIterator() &#123; let [prev, curr] = [0, 1]; return &#123; next() &#123; [prev, curr] = [curr, prev + curr]; return &#123; value: prev, done: false &#125;; &#125; &#125;;&#125;const fib = fibonacciIterator();console.log(fib.next().value); // 1console.log(fib.next().value); // 1console.log(fib.next().value); // 2console.log(fib.next().value); // 3console.log(fib.next().value); // 5console.log(fib.next().value); // 8 代码说明： 每次调用 next()，斐波那契序列都会前进一位，并返回当前的值。 无限序列的迭代器没有终止条件，因此 done 始终为 false。 六、可迭代对象与迭代器的区别 可迭代对象：具有 Symbol.iterator 方法的对象，可以在 for…of 中使用，如数组、字符串等。 迭代器：实现了 next() 方法的对象，每次调用 next() 返回一个 { value, done } 对象。 总结： 可迭代对象内部使用迭代器来实现元素的逐个访问。for…of 只是对迭代器的一种封装。","categories":[{"name":"未分类","slug":"未分类","permalink":"https://www.laoliang.ink/categories/%E6%9C%AA%E5%88%86%E7%B1%BB/"}],"tags":[{"name":"无标签","slug":"无标签","permalink":"https://www.laoliang.ink/tags/%E6%97%A0%E6%A0%87%E7%AD%BE/"}]},{"title":"基于 axios 手写文件上传，实现进度监听、上传中断","slug":"基于 axios 手写文件上传，实现进度监听、上传中断","date":"2022-05-12T14:18:23.000Z","updated":"2024-11-16T11:26:50.329Z","comments":true,"path":"posts/20220512221823/","link":"","permalink":"https://www.laoliang.ink/posts/20220512221823/","excerpt":"","text":"要基于 axios 手写一个文件上传组件，并实现以下功能： 选择文件并上传 监听上传进度 支持上传中断（取消请求） 处理成功和失败的回调 下面是一个完整的实现代码示例： 1. 安装依赖1npm install axios 2. 代码实现HTML 模板示例： 123456&lt;div id=&quot;app&quot;&gt; &lt;input type=&quot;file&quot; id=&quot;fileInput&quot; /&gt; &lt;button id=&quot;uploadButton&quot;&gt;上传&lt;/button&gt; &lt;button id=&quot;cancelButton&quot;&gt;取消上传&lt;/button&gt; &lt;div id=&quot;progress&quot;&gt;上传进度: 0%&lt;/div&gt;&lt;/div&gt; JavaScript 代码实现： 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859import axios from &#x27;axios&#x27;;let cancelTokenSource = null; // 用于取消上传// 监听文件选择并上传document.getElementById(&#x27;uploadButton&#x27;).addEventListener(&#x27;click&#x27;, () =&gt; &#123; const fileInput = document.getElementById(&#x27;fileInput&#x27;); if (fileInput.files.length === 0) &#123; alert(&#x27;请选择文件&#x27;); return; &#125; const file = fileInput.files[0]; uploadFile(file);&#125;);// 取消上传document.getElementById(&#x27;cancelButton&#x27;).addEventListener(&#x27;click&#x27;, () =&gt; &#123; if (cancelTokenSource) &#123; cancelTokenSource.cancel(&#x27;上传已取消&#x27;); &#125;&#125;);// 文件上传逻辑function uploadFile(file) &#123; const url = &#x27;https://your-upload-endpoint.com/upload&#x27;; // 替换为实际上传地址 // 创建 Axios 的取消令牌 cancelTokenSource = axios.CancelToken.source(); // 创建表单数据 const formData = new FormData(); formData.append(&#x27;file&#x27;, file); axios.post(url, formData, &#123; headers: &#123; &#x27;Content-Type&#x27;: &#x27;multipart/form-data&#x27;, &#125;, cancelToken: cancelTokenSource.token, onUploadProgress: (progressEvent) =&gt; &#123; const percentCompleted = Math.round( (progressEvent.loaded * 100) / progressEvent.total ); document.getElementById(&#x27;progress&#x27;).innerText = `上传进度: $&#123;percentCompleted&#125;%`; &#125;, &#125;) .then((response) =&gt; &#123; alert(&#x27;上传成功&#x27;); console.log(response.data); &#125;) .catch((error) =&gt; &#123; if (axios.isCancel(error)) &#123; console.log(&#x27;上传被取消:&#x27;, error.message); &#125; else &#123; console.error(&#x27;上传失败:&#x27;, error); alert(&#x27;上传失败&#x27;); &#125; &#125;);&#125; 3. 代码说明 选择文件并上传：用户点击上传按钮时，调用 uploadFile 函数，将文件上传到指定的服务器端。 监听上传进度：使用 onUploadProgress 回调函数来实时更新进度。 支持上传中断：使用 axios.CancelToken 创建可取消的请求，并在用户点击“取消上传”按钮时触发中断。 处理错误：区分普通错误和用户主动取消上传的情况。 4. 效果预览 进度监听：上传时，页面上会实时显示百分比。 取消上传：上传过程中的任何时间都可以中断请求。 5. 服务器端（可选参考）后端需要支持接收 multipart/form-data 请求。如果你使用的是 Node.js，可以用 express 搭配 multer 处理文件上传。 1234567891011121314const express = require(&#x27;express&#x27;);const multer = require(&#x27;multer&#x27;);const upload = multer(&#123; dest: &#x27;uploads/&#x27; &#125;);const app = express();app.post(&#x27;/upload&#x27;, upload.single(&#x27;file&#x27;), (req, res) =&gt; &#123; console.log(&#x27;文件信息:&#x27;, req.file); res.send(&#123; status: &#x27;上传成功&#x27; &#125;);&#125;);app.listen(3000, () =&gt; &#123; console.log(&#x27;服务器启动在 http://localhost:3000&#x27;);&#125;); 这个组件实现了完整的文件上传流程，你还可以根据需要进一步定制，比如支持多个文件、添加更多的上传校验等。","categories":[{"name":"未分类","slug":"未分类","permalink":"https://www.laoliang.ink/categories/%E6%9C%AA%E5%88%86%E7%B1%BB/"}],"tags":[{"name":"无标签","slug":"无标签","permalink":"https://www.laoliang.ink/tags/%E6%97%A0%E6%A0%87%E7%AD%BE/"}]},{"title":"在 PowerShell 中使用 Git","slug":"在-PowerShell-中使用-Git","date":"2022-04-22T10:18:21.000Z","updated":"2024-11-16T11:26:50.328Z","comments":true,"path":"posts/20220422181821/","link":"","permalink":"https://www.laoliang.ink/posts/20220422181821/","excerpt":"","text":"前言在 macOS 下 git 命令行工具默认有着很好的 tab 补全功能，而在 Windows 下通过 exe 安装的 git 程序，看起来就有些简陋。 其自带的 Unix Shell 环境模拟窗口 Git Bash，有着丑陋的外观，即便可以通过配置字体、颜色等手段稍加改善，但其一会儿类 Unix 工具链环境的反馈，一会儿 Windows cmd 工具链混搭的集成环境，着实容易让人精神分裂。 为了更好的自始至终统一使用体验，我们通常会将 git 程序添加到 全局 path 中（引导安装程序即可选配），然后在 cmd 或 PowerShell（通常是功能更强大的 PowerShell）中调用 git。 然而在 PowerShell 中调用 git 时，我们丧失了 tab 补全功能。 这里，我们介绍使用 Posh-Git 这个扩展包，从而在 PowerShell 中应用 git 的 tab 补全。 安装 Post-Git配置脚本执行权限在可以运行 PowerShell 脚本之前，你需要将本地的 ExecutionPolicy 设置为 RemoteSigned 在 PowerShell 中执行下面的命令，更精细化的配置参见 微软文档 Set-ExecutionPolicy 1Set-ExecutionPolicy -ExecutionPolicy RemoteSigned -Scope LocalMachine 使用包管理器安装 posh-git在 PowerShell 中执行下面的命令，通过包管理器来安装 posh-git 12Install-Module posh-git -Scope CurrentUser -ForceInstall-Module posh-git -Scope CurrentUser -AllowPrerelease -Force # 带有 PowerShell Core 支持的更新的 beta 版 如果你想为所有的用户安装 posh-git，请使用 -Scope AllUsers 并在管理员权限启动的 PowerShell 控制台中执行。 更新 PowerShell 提示符要在你的提示符中包含 Git 信息，那么需要导入 Posh-Git 模块。 要让 PowerShell 在每次启动时都导入 Posh-Git，请执行 Add-PoshGitToProfile 命令， 它会在你的 $profile 脚本中添加导入语句。此脚本会在每次打开新的 PowerShell 终端时执行。 12Import-Module posh-gitAdd-PoshGitToProfile -AllHosts 更多详细内容，参见：Git 文档：A1.9 附录 A: 在其它环境中使用 Git - Git 在 PowerShell 中使用 Git 自定义 posh-git 提示符当您导入 posh-git 模块时，它将用新的提示功能替换 PowerShell 的默认提示功能。当当前目录位于 Git 存储库中时，posh-git 提示功能将显示 Git 状态摘要信息。如果 posh-git 检测到您有自己的自定义提示功能，则不会替换提示功能。 这里可以通过编辑当前用户 ps1 文件，实现自定义提示符： 1echo $Profile 得到形如下方的绝对路径，表示当前用户 ps1 配置文件默认加载位置 1C:\\Users\\liang\\Documents\\WindowsPowerShell\\Microsoft.PowerShell_profile.ps1 打开并编辑这个文件，加入下面的内容： 123456789$GitPromptSettings.DefaultPromptPrefix.Text = &#x27;PS [$(Get-Date -f &quot;HH:mm:ss&quot;)] &#x27;$GitPromptSettings.DefaultPromptPrefix.ForegroundColor = [ConsoleColor]::Magenta$GitPromptSettings.DefaultPromptAbbreviateHomeDirectory = $true$GitPromptSettings.BeforePath = &#x27;&#123;&#x27;$GitPromptSettings.AfterPath = &#x27;&#125;&#x27;$GitPromptSettings.DefaultPromptPath.ForegroundColor = 0xFFA500$GitPromptSettings.BeforePath.ForegroundColor = 0xFFA500$GitPromptSettings.AfterPath.ForegroundColor = 0xFFA500$GitPromptSettings.DefaultPromptBeforeSuffix.Text = &#x27;`n&#x27; 你将获得一个同时拥有 时间、家目录缩写、git 状态的提示符，它会像下面这样： 更多详细内容，参见：GitHub - dahlbyk/posh-git - Customizing the posh-git prompt 顺便说下中文乱码问题PowerShell 下 git log 中文、git status 文件名等，可能存在中文乱码的问题。 可以向下面一样配置 git： 1234git config --global core.quotepath falsegit config --global gui.encoding utf-8git config --global i18n.commit.encoding utf-8git config --global i18n.logoutputencoding utf-8 一劳永逸的方式： 系统设置 -&gt; 管理语言设置，打开旧版的区域设置窗口 更改系统区域设置 -&gt; Beta 版：使用 Unicode UTF-8 提供全球语言支持，勾选它，重启✅","categories":[{"name":"未分类","slug":"未分类","permalink":"https://www.laoliang.ink/categories/%E6%9C%AA%E5%88%86%E7%B1%BB/"}],"tags":[{"name":"无标签","slug":"无标签","permalink":"https://www.laoliang.ink/tags/%E6%97%A0%E6%A0%87%E7%AD%BE/"}]},{"title":"PowerShell 修改提示符的文字内容和样式","slug":"PowerShell-修改提示符的文字内容和样式","date":"2022-04-21T16:08:13.000Z","updated":"2024-11-16T11:26:50.328Z","comments":true,"path":"posts/20220422000813/","link":"","permalink":"https://www.laoliang.ink/posts/20220422000813/","excerpt":"","text":"前言默认的 PowerShell 提示符丑？ 其实我们可以通过编辑 PowerShell 的启动脚本，来自定义提示符的文字内容和样式 配置脚本执行权限在可以运行 PowerShell 脚本之前，你需要将本地的 ExecutionPolicy 设置为 RemoteSigned 在 PowerShell 中执行下面的命令，更精细化的配置参见 微软文档 Set-ExecutionPolicy 1Set-ExecutionPolicy -ExecutionPolicy RemoteSigned -Scope LocalMachine 查看当前用户 ps1 文件位置1echo $Profile 得到形如下方的绝对路径，表示当前用户 ps1 配置文件默认加载位置 1C:\\Users\\liang\\Documents\\WindowsPowerShell\\Microsoft.PowerShell_profile.ps1 编辑 ps1 配置文件编辑这个 ps1 配置文件，可以改变 PowerShell 初始化时的一些行为 如果是第一次使用 PowerShell，这个文件可能不存在，需要我们手动创建 如果当前系统安装有 VScode，可以执行一下命令，快速创建或打开 1code $Profile 下方是我的自定义配置文件内容，可以参考 123456789function prompt&#123; Write-Host (&quot;`nPS [&quot;) -nonewline Write-Host ($(get-date -Format &quot;HH:mm:ss&quot;)) -nonewline -foregroundcolor Red Write-Host (&quot;] &#123;&quot;) -nonewline Write-Host ($(pwd)) -nonewline -foregroundcolor Blue Write-Host (&quot;&#125;&quot;) return &quot;$ &quot;&#125; 使自定义配置文件生效一种方式是： 关闭并重新打开当前 PowerShell 会话，修改的配置文件效果便会生效 另一种即时生效的方式是： 执行重新加载命令： 1. $Profile 最终效果","categories":[{"name":"未分类","slug":"未分类","permalink":"https://www.laoliang.ink/categories/%E6%9C%AA%E5%88%86%E7%B1%BB/"}],"tags":[{"name":"无标签","slug":"无标签","permalink":"https://www.laoliang.ink/tags/%E6%97%A0%E6%A0%87%E7%AD%BE/"}]},{"title":"如何封装一个 JavaScript 的轻量级事件总线（Event Bus）","slug":"如何封装一个 JavaScript 的轻量级事件总线（Event Bus）","date":"2022-03-05T12:22:11.000Z","updated":"2024-11-16T11:26:50.328Z","comments":true,"path":"posts/20220305202211/","link":"","permalink":"https://www.laoliang.ink/posts/20220305202211/","excerpt":"","text":"1. 引言在前端开发中，组件之间的通信是一项常见需求。虽然常用的库（如 Redux 或 Vuex）可以解决状态管理问题，但有时我们只需要一个简单的事件总线（Event Bus），来让组件之间交换事件，而不引入复杂的状态管理工具。 接下来我们将一步步实现一个轻量级 JavaScript 事件总线，并介绍其应用场景和最佳实践。 2. 什么是事件总线？事件总线是一种 发布-订阅模式（Publish-Subscribe）的实现。其核心思想是将事件的发布者和订阅者解耦，让它们无需直接相互依赖。事件总线扮演的是一个中央通道的角色，负责协调不同组件之间的事件通知。 3. 实现一个简单的事件总线下面我们使用 JavaScript 的原生能力来封装一个简单易用的事件总线。 基础实现： 123456789101112131415161718192021222324252627282930313233343536class EventBus &#123; constructor() &#123; this.events = new Map(); // 使用 Map 存储事件 &#125; // 注册事件监听器 on(eventName, listener) &#123; if (!this.events.has(eventName)) &#123; this.events.set(eventName, []); &#125; this.events.get(eventName).push(listener); &#125; // 触发事件 emit(eventName, ...args) &#123; if (this.events.has(eventName)) &#123; this.events.get(eventName).forEach(listener =&gt; listener(...args)); &#125; &#125; // 取消注册事件监听器 off(eventName, listener) &#123; if (!this.events.has(eventName)) return; const listeners = this.events.get(eventName).filter(fn =&gt; fn !== listener); this.events.set(eventName, listeners); &#125; // 清除所有事件监听器 clear() &#123; this.events.clear(); &#125;&#125;// 导出一个单例事件总线const eventBus = new EventBus();export default eventBus; 4. 使用方法4.1 注册事件监听器123456import eventBus from &#x27;./eventBus&#x27;;// 注册一个事件监听器eventBus.on(&#x27;userLoggedIn&#x27;, (user) =&gt; &#123; console.log(`用户 $&#123;user.name&#125; 已登录`);&#125;); 4.2 触发事件12// 触发 &#x27;userLoggedIn&#x27; 事件eventBus.emit(&#x27;userLoggedIn&#x27;, &#123; name: &#x27;Alice&#x27; &#125;); 输出： 1用户 Alice 已登录 4.3 取消事件监听12345678const onUserLoggedOut = () =&gt; console.log(&#x27;用户已登出&#x27;);// 注册并取消监听器eventBus.on(&#x27;userLoggedOut&#x27;, onUserLoggedOut);eventBus.off(&#x27;userLoggedOut&#x27;, onUserLoggedOut);// 尝试触发（不会有任何输出）eventBus.emit(&#x27;userLoggedOut&#x27;); 4.4 清除所有事件12// 清除所有事件监听器eventBus.clear(); 5. 进阶功能：一次性监听（once）有时候，我们希望某个监听器只响应一次事件，这可以通过扩展 on 方法来实现。 123456789101112class EventBus &#123; // 省略其他方法... // 一次性监听事件 once(eventName, listener) &#123; const wrapper = (...args) =&gt; &#123; listener(...args); this.off(eventName, wrapper); // 自动取消监听 &#125;; this.on(eventName, wrapper); &#125;&#125; 使用 once 监听事件 123456789eventBus.once(&#x27;dataLoaded&#x27;, (data) =&gt; &#123; console.log(&#x27;数据已加载:&#x27;, data);&#125;);// 第一次触发会响应eventBus.emit(&#x27;dataLoaded&#x27;, [1, 2, 3]); // 输出: 数据已加载: [1, 2, 3]// 第二次触发不会响应eventBus.emit(&#x27;dataLoaded&#x27;, [4, 5, 6]); 6. 常见应用场景 组件通信：在 React、Vue 等框架中，实现兄弟组件或跨层级组件的通信。 全局状态管理：用于简易的全局事件通知，比如用户登录、登出事件。 异步事件处理：监听某些异步任务的状态变更，如网络请求完成或 WebSocket 消息接收。 解耦模块之间的依赖：减少模块之间的直接调用，提升代码的可维护性。 7. 性能优化与注意事项 内存泄漏：确保在组件销毁或不再需要事件时取消监听器，否则可能导致内存泄漏。 事件名规范：为事件命名时，建议使用命名空间风格，如 user:login，以防止事件名冲突。 频繁触发的事件：对于高频事件（如滚动或鼠标移动），可以结合 节流（throttle）或防抖（debounce） 来优化性能。 8. 总结通过本文的介绍，我们实现了一个简单且高效的事件总线，并展示了它在实际开发中的使用场景。相比于 Redux 等复杂的状态管理库，这种轻量级的事件总线能满足许多日常需求，尤其适用于中小型项目或临时状态共享的场景。 如果你有更多需求，比如需要持久化事件状态、事件队列等功能，可以在此基础上进一步扩展。","categories":[{"name":"未分类","slug":"未分类","permalink":"https://www.laoliang.ink/categories/%E6%9C%AA%E5%88%86%E7%B1%BB/"}],"tags":[{"name":"无标签","slug":"无标签","permalink":"https://www.laoliang.ink/tags/%E6%97%A0%E6%A0%87%E7%AD%BE/"}]},{"title":"什么是微前端（Micro-Frontend）","slug":"什么是微前端（Micro-Frontend）","date":"2022-02-20T14:28:31.000Z","updated":"2024-11-16T11:26:50.328Z","comments":true,"path":"posts/20220220222831/","link":"","permalink":"https://www.laoliang.ink/posts/20220220222831/","excerpt":"","text":"随着前端项目的复杂度不断提升，传统的单页应用（SPA）架构逐渐暴露出性能瓶颈和团队协作难题。为了解决这些问题，微前端（Micro-Frontend）应运而生。微前端是一种将大型前端应用拆分为多个可独立开发和部署的微型应用的架构理念。本文将介绍微前端的基本概念、核心思想、常见实现方式和优缺点，为你快速入门奠定基础。 一、微前端的背景和由来传统的前端开发以单页应用（SPA）为主流。随着业务复杂度增加，单一代码库会遇到以下问题： 代码库庞大：单一应用的代码量庞大，构建速度变慢，调试和维护困难。 协作复杂：多团队协作时容易发生代码冲突，团队之间的开发周期互相依赖。 技术升级困难：某部分需要升级技术栈时可能影响整个项目。 微前端借鉴了微服务架构的理念，通过将大型前端项目拆分为多个独立的小型应用来解决这些问题。 二、什么是微前端？微前端是一种将前端应用按功能模块划分为多个独立单元，每个单元称为微应用（Micro App）。这些微应用可以独立开发、测试和部署，但在用户看来，它们协同组成一个完整的网站。 核心思想： 独立性：每个微应用可以独立开发、构建和部署，甚至可以采用不同的技术栈。 松耦合：微应用之间尽量减少依赖，保证彼此独立运行。 团队自治：不同团队可以负责不同的微应用，减少协作冲突。 渐进集成：支持逐步从传统应用迁移到微前端架构，避免一次性重构的高风险。 三、微前端的常见实现方式1. 基于 iframe 的方式 将不同的微应用嵌入到主应用的页面中。 优点：隔离性强，不同应用之间不会相互干扰。 缺点：iframe 的体验较差，SEO 和跨应用通信复杂。 2. 基于路由的分割（主子应用架构） 通过路由系统将不同的路径映射到不同的微应用上。 场景：用户访问 /dashboard 时加载微应用 A，访问 /profile 时加载微应用 B。 实现方式：采用 single-spa 等框架，实现多个微应用的动态加载。 3. 模块联邦（Module Federation） 利用 Webpack 5 的模块联邦功能，实现微应用之间的模块共享。 优点：支持在运行时加载远程模块，实现不同应用之间的动态依赖。 缺点：需要复杂的构建配置和依赖管理。 四、微前端的优缺点优点 技术栈无关：不同微应用可以使用不同的技术框架（React、Vue、Angular 等）。 独立部署：每个微应用可以单独更新、部署，减少对其他模块的影响。 提高协作效率：多个团队可以并行开发不同的微应用，减少代码冲突。 渐进迁移：支持逐步迁移和重构，降低系统升级风险。 缺点 复杂性增加：需要处理微应用之间的通信、状态共享和样式隔离等问题。 性能开销：加载多个微应用可能增加页面加载时间，需要优化资源管理。 构建配置繁琐：不同微应用的构建和集成需要复杂的工具链支持。 五、微前端的应用场景1. 大型企业级项目 适合具有多个团队合作、业务模块复杂的大型企业项目，如电商平台或企业管理系统。 2. 多品牌或多产品线网站 当一个网站需要支持多个品牌或产品线时，每个品牌可以作为一个独立的微应用。 3. 渐进式重构 在原有单页应用基础上，通过逐步拆分为微应用实现系统的渐进重构。 六、微前端的框架与工具 single-spa：一个流行的微前端框架，支持多框架共存和微应用集成。 qiankun：基于 single-spa 的增强版，适用于企业级应用。 Webpack Module Federation：用于实现运行时模块共享的强大工具。 Pirate Ship：一款实验性的微前端开发工具，专注于快速集成。 七、总结微前端是一种有效解决大型前端项目复杂性和团队协作问题的架构理念。通过将应用拆分为多个独立的微应用，团队可以提高开发效率，并减少部署和升级的风险。然而，微前端也带来了更多的复杂性，需要开发者在应用设计、工具链选择和性能优化上进行合理规划。","categories":[{"name":"未分类","slug":"未分类","permalink":"https://www.laoliang.ink/categories/%E6%9C%AA%E5%88%86%E7%B1%BB/"}],"tags":[{"name":"无标签","slug":"无标签","permalink":"https://www.laoliang.ink/tags/%E6%97%A0%E6%A0%87%E7%AD%BE/"}]},{"title":"详解防抖与节流","slug":"详解防抖与节流","date":"2021-11-20T13:15:45.000Z","updated":"2024-11-16T11:26:50.328Z","comments":true,"path":"posts/20211120211545/","link":"","permalink":"https://www.laoliang.ink/posts/20211120211545/","excerpt":"","text":"在前端开发中，防抖（Debounce）和节流（Throttle）是两个优化频繁操作的常用技巧。它们主要用于减少高频率触发的事件处理次数，提升性能。本文将由浅入深地介绍这两者的原理、实现方式及应用场景，并比较它们的异同。 一、为什么需要防抖与节流？在浏览器中，有一些事件会频繁触发，比如： 窗口 resize、scroll 事件：用户移动滚轮或拖拽窗口时会连续触发。 输入框 keyup 事件：用户快速输入内容时会在每次按键后触发。 如果这些事件都直接绑定了处理函数，可能会触发大量不必要的计算，导致页面卡顿或响应迟缓。 防抖和节流应运而生，帮助我们控制事件触发频率，避免性能瓶颈。 二、防抖（Debounce）1. 防抖的定义防抖的核心是多次触发同一事件时，只执行最后一次。即：事件被触发后，只有在指定时间内没有再次触发，处理函数才会执行。如果事件在等待时间内又触发了，则重新计时。 2. 防抖的实现123456789function debounce(func, delay) &#123; let timeout; return function (...args) &#123; clearTimeout(timeout); // 每次触发时清除之前的计时器 timeout = setTimeout(() =&gt; &#123; func.apply(this, args); // 最后一次触发后执行 &#125;, delay); &#125;;&#125; 3. 应用场景 搜索框：用户输入时避免每次按键都发送请求，只有停止输入一段时间后再进行搜索。 窗口调整：防止频繁 resize 事件导致页面频繁重绘。 三、节流（Throttle）1. 节流的定义节流的核心是规定在单位时间内只能执行一次，即使在这段时间内事件被多次触发，处理函数也只会按规定间隔执行。 2. 节流的实现时间戳版 12345678910function throttle(func, interval) &#123; let lastTime = 0; return function (...args) &#123; const now = Date.now(); if (now - lastTime &gt;= interval) &#123; lastTime = now; func.apply(this, args); &#125; &#125;;&#125; 定时器版 1234567891011function throttle(func, interval) &#123; let timeout; return function (...args) &#123; if (!timeout) &#123; timeout = setTimeout(() =&gt; &#123; timeout = null; func.apply(this, args); &#125;, interval); &#125; &#125;;&#125; 3. 应用场景 页面滚动事件：滚动过程中每隔一段时间触发一次，而非每像素移动都触发。 按钮防重复点击：避免用户频繁点击按钮导致多次触发请求。 四、防抖与节流的区别 特性 防抖(Debounce) 节流(Throttle) 触发方式 多次触发后只执行最后一次 每隔固定间隔执行一次 适合场景 用户停止频繁操作后执行处理逻辑 持续执行过程中限制调用频率 实现方式 基于计时器 基于时间戳或定时器 效果 避免短时间内的频繁触发 限制高频操作的处理次数 五、如何选择？ 用户停止操作后需要进行处理：选用防抖。例如搜索框输入、防止多次提交表单。 限制操作频率：选用节流。例如页面滚动、窗口大小调整等需要频繁触发的事件。 六、结合防抖与节流在某些复杂场景中，可能需要结合防抖和节流的特点。举例：在页面滚动时进行懒加载时，我们希望： 滚动时限频触发（节流），减少性能消耗； 停止滚动后立即处理剩余任务（防抖），确保用户停下后能立刻看到内容。 可以使用如下方式： 12345678910111213141516171819function debounceThrottle(func, delay, interval) &#123; let lastTime = 0; let timeout; return function (...args) &#123; const now = Date.now(); if (now - lastTime &gt;= interval) &#123; lastTime = now; func.apply(this, args); &#125; else &#123; clearTimeout(timeout); timeout = setTimeout(() =&gt; &#123; lastTime = Date.now(); func.apply(this, args); &#125;, delay); &#125; &#125;;&#125; 七、总结 防抖和节流是前端开发中的重要性能优化手段，能有效减少不必要的事件处理。防抖适用于停止操作后的处理逻辑，节流适用于持续操作的限频处理。理解两者的异同与应用场景，能帮助我们编写更加高效的代码。","categories":[{"name":"未分类","slug":"未分类","permalink":"https://www.laoliang.ink/categories/%E6%9C%AA%E5%88%86%E7%B1%BB/"}],"tags":[{"name":"无标签","slug":"无标签","permalink":"https://www.laoliang.ink/tags/%E6%97%A0%E6%A0%87%E7%AD%BE/"}]},{"title":"宏任务、微任务，以及 Vue.js 中的 nextTick","slug":"宏任务、微任务，以及 Vue.js 中的 nextTick","date":"2021-11-16T11:35:12.000Z","updated":"2024-11-16T11:26:50.327Z","comments":true,"path":"posts/20211116193512/","link":"","permalink":"https://www.laoliang.ink/posts/20211116193512/","excerpt":"","text":"在 JavaScript 的异步机制中，“宏任务”（Macro Task）和“微任务”（Micro Task）扮演着非常重要的角色。特别是当我们使用 Vue 2 或 Vue 3 进行前端开发时，nextTick 这个 API 与它们密切相关。本文将由浅入深，带你理解它们的区别，以及 nextTick 在 Vue 中的应用。 一、宏任务与微任务：事件循环的基础1.1 什么是事件循环（Event Loop）？JavaScript 是一种单线程的语言，意味着同一时间只能执行一段代码。为了解决阻塞问题，JavaScript 引入了事件循环机制，允许任务异步执行。事件循环的主要逻辑是： 从任务队列中取出一个任务并执行（主线程）。 如果任务内部产生异步操作（如定时器、Promise），这些任务会被放入不同队列。 等到当前执行栈为空时，再根据优先级处理这些任务。 1.2 宏任务 vs. 微任务在事件循环中，任务分为宏任务和微任务两类： 常见的宏任务（Macro Task）包括： setTimeout、setInterval DOM 渲染任务 用户交互事件（如点击、输入） 宏任务会先进入“任务队列”，等待前面的所有任务执行完毕后，才会进入主线程执行。 微任务（Micro Task）主要包括： Promise.then、queueMicrotask MutationObserver（监听 DOM 变化） 微任务的优先级高于宏任务，在当前宏任务执行完之后，会立刻执行微任务队列中的任务。 顺序总结： 一个宏任务执行完毕后，检查所有的微任务并执行它们。 微任务执行完毕后，事件循环再去执行下一个宏任务。 1.3 宏任务与微任务的简单示例1234567891011console.log(&#x27;script start&#x27;);setTimeout(() =&gt; &#123; console.log(&#x27;macro task - setTimeout&#x27;);&#125;, 0);Promise.resolve().then(() =&gt; &#123; console.log(&#x27;micro task - Promise&#x27;);&#125;);console.log(&#x27;script end&#x27;); 输出顺序： 1234script startscript endmicro task - Promisemacro task - setTimeout 解释： console.log(‘script start’) 和 console.log(‘script end’) 属于主线程中的同步任务，按顺序执行。 setTimeout 的回调是宏任务，放入宏任务队列中。 Promise.then 是微任务，会在当前宏任务结束后立即执行。 最后，setTimeout 的回调才会执行。 二、nextTick 在 Vue 2 和 Vue 3 中的作用在 Vue 中，我们经常遇到这样的场景：修改数据后，DOM 并未立刻更新。这是因为 Vue 的响应式更新是异步的。为优化性能，Vue 会在本次事件循环结束后，统一执行所有的 DOM 更新任务。此时，nextTick 就派上了用场。 2.1 Vue 的异步 DOM 更新Vue 会把数据变更后的 DOM 更新任务放入微任务队列中，而不是立即更新。假设我们在修改数据后立即访问 DOM，会发现 DOM 还没有反应过来。例如： 12this.count = 1;console.log(this.$refs.counter.innerText); // 可能还是 0 要确保获取到最新的 DOM，需要等待下一次 DOM 更新完成。Vue 提供了 this.$nextTick 来解决这个问题。 三、Vue 2 和 Vue 3 中的 nextTick 使用3.1 Vue 2 的 nextTick在 Vue 2 中，this.$nextTick 是一个实例方法，用于等待 DOM 更新完成后执行回调： 1234this.count = 1;this.$nextTick(() =&gt; &#123; console.log(this.$refs.counter.innerText); // 1&#125;); 如果你需要确保多个数据变更后统一操作 DOM，可以将所有逻辑放在 nextTick 回调中。 123456this.count = 1;this.msg = &#x27;Hello&#x27;;this.$nextTick(() =&gt; &#123; console.log(this.$refs.counter.innerText); // 1 console.log(this.$refs.message.innerText); // Hello&#125;); 3.2 Vue 3 的 nextTick在 Vue 3 中，nextTick 变成了一个顶层导出的函数，不再需要通过实例调用。使用方法如下： 123456import &#123; nextTick &#125; from &#x27;vue&#x27;;count.value = 1;nextTick(() =&gt; &#123; console.log(counterRef.value.innerText); // 1&#125;); Vue 3 的 nextTick 在 Composition API 中的使用更加灵活，因为你可以在任何地方调用它，而不需要依赖组件实例。 四、nextTick 底层原理分析4.1 nextTick 的实现：微任务的运用Vue 的 nextTick 内部实现非常巧妙，它利用了微任务机制（Promise 或 MutationObserver）来确保回调函数在 DOM 更新后执行。 Vue 2 的实现简要代码： 123function nextTick(cb) &#123; Promise.resolve().then(cb);&#125; Vue 3 的实现会更加复杂： Vue 3 内部根据环境决定使用何种微任务，比如优先使用 queueMicrotask，在不支持的环境下降级为 Promise。 4.2 为什么不直接使用 setTimeout？虽然 setTimeout 也可以异步执行任务，但它是宏任务，会导致回调的执行延迟。Vue 选择使用微任务（如 Promise），确保在本轮事件循环内尽快更新 DOM。 五、总结 宏任务和微任务是 JavaScript 异步机制中的重要概念。微任务优先于宏任务执行。 Vue 的响应式更新是异步的，为了性能优化，Vue 会将多次数据更新合并到一个微任务中执行。 nextTick 是 Vue 中用于确保 DOM 更新完成后执行回调的工具。在 Vue 2 中，它是实例方法，而在 Vue 3 中，它变成了顶层导出的函数。 了解了宏任务、微任务和 nextTick 后，你就能更好地掌握 Vue 的异步更新机制，写出更高效的代码！","categories":[{"name":"未分类","slug":"未分类","permalink":"https://www.laoliang.ink/categories/%E6%9C%AA%E5%88%86%E7%B1%BB/"}],"tags":[{"name":"无标签","slug":"无标签","permalink":"https://www.laoliang.ink/tags/%E6%97%A0%E6%A0%87%E7%AD%BE/"}]},{"title":"JavaScript 支持哪些模块加载方式","slug":"JavaScript 支持哪些模块加载方式","date":"2021-10-28T13:16:29.000Z","updated":"2024-11-16T11:26:50.327Z","comments":true,"path":"posts/20211028211629/","link":"","permalink":"https://www.laoliang.ink/posts/20211028211629/","excerpt":"","text":"在 JavaScript 中，导入模块的方式根据使用的模块规范（如 CommonJS、ESM 等）有所不同。下面介绍几种常见的导入方式： 1. CommonJS 模块导入 用于 Node.js 环境（也可以在支持的工具中使用，如 Webpack）。 语法：require 12const fs = require(&#x27;fs&#x27;); // 导入 Node 内置模块const myModule = require(&#x27;./myModule&#x27;); // 导入本地模块 特性： 模块导入是同步的。 常用于老版本项目和 Node.js 中。 2. ESM（ECMAScript Module）导入 原生支持的 ES6 模块系统。现代前端项目和 Node.js (v12+) 支持 ESM。 1234567891011121314// 导入默认导出import defaultExport from &#x27;./myModule.js&#x27;;// 导入命名导出import &#123; namedExport1, namedExport2 &#125; from &#x27;./myModule.js&#x27;;// 重命名导入的变量import &#123; namedExport as alias &#125; from &#x27;./myModule.js&#x27;;// 导入所有内容为对象import * as myModule from &#x27;./myModule.js&#x27;;// 动态导入const module = await import(&#x27;./myModule.js&#x27;); 特性： 更加模块化，支持 tree-shaking。 可与 async/await 配合动态导入。 3. AMD（Asynchronous Module Definition）导入 常见于老的前端工具（如 RequireJS）。 123require([&#x27;./myModule&#x27;], function (myModule) &#123; // 模块加载完成后的操作&#125;); 特性： 适用于浏览器，支持异步加载模块。 不常见于现代项目。 4. UMD（Universal Module Definition）导入 兼容 CommonJS、AMD 和全局变量的模块。 1234567891011(function (root, factory) &#123; if (typeof define === &#x27;function&#x27; &amp;&amp; define.amd) &#123; define([&#x27;dependency&#x27;], factory); // AMD &#125; else if (typeof module === &#x27;object&#x27; &amp;&amp; module.exports) &#123; module.exports = factory(require(&#x27;dependency&#x27;)); // CommonJS &#125; else &#123; root.myModule = factory(root.dependency); // 浏览器全局 &#125;&#125;(this, function (dependency) &#123; // 模块逻辑&#125;)); 特性： 用于需要同时支持多种环境的库。 5. 全局变量方式导入 不使用模块系统，通过 &lt;script&gt; 标签引入脚本。 1234&lt;script src=&quot;myModule.js&quot;&gt;&lt;/script&gt;&lt;script&gt; console.log(window.myModule); // 直接访问全局变量&lt;/script&gt; 特性： 适合简单页面，但无法实现模块隔离。 总结：什么时候用哪种导入方式？ Node.js：推荐使用 ESM (import)，但 CommonJS (require) 仍然广泛支持。 现代前端项目：推荐使用 ESM 导入。 老旧项目或浏览器兼容性需求：可能使用 AMD 或 UMD。 简单静态页面：直接使用全局变量导入。 如需在 ESM 和 CommonJS 间兼容，你可能需要配置工具（如 Rollup、Webpack）或添加 .cjs、.mjs 文件后缀来区分模块类型。","categories":[{"name":"未分类","slug":"未分类","permalink":"https://www.laoliang.ink/categories/%E6%9C%AA%E5%88%86%E7%B1%BB/"}],"tags":[{"name":"无标签","slug":"无标签","permalink":"https://www.laoliang.ink/tags/%E6%97%A0%E6%A0%87%E7%AD%BE/"}]},{"title":"如何区分反向代理和正向代理","slug":"如何区分反向代理和正向代理","date":"2021-10-26T01:55:22.000Z","updated":"2024-11-16T11:26:50.327Z","comments":true,"path":"posts/20211026095522/","link":"","permalink":"https://www.laoliang.ink/posts/20211026095522/","excerpt":"","text":"反向代理和正向代理的主要区别在于它们代理的对象和使用场景不同。 以下是它们的概念、工作方式和使用场景的详细对比： 1. 反向代理（Reverse Proxy）定义： 反向代理服务器位于客户端和服务器之间，它代表服务器接收客户端的请求，并将请求转发给真正的后端服务器，然后将服务器的响应返回给客户端。 工作流程： 客户端发出请求到代理服务器。 代理服务器将请求转发给内部的真实服务器。 真实服务器返回响应给代理服务器。 代理服务器再将响应返回给客户端。 典型场景： 负载均衡：将请求分配到多个后端服务器，减轻单一服务器的压力。 安全防护：隐藏后端服务器的真实 IP，保护其不受攻击。 缓存加速：将常用资源缓存在代理服务器上，提高响应速度。 跨域处理（CORS）：前端开发时，通过反向代理解决跨域问题。 示例： 使用 Nginx 或 Apache 作为反向代理，将请求转发到不同的后端服务器。 CDN（内容分发网络）也是反向代理的一种，通过代理服务器缓存资源，减少主服务器负载。 2. 正向代理（Forward Proxy）定义： 正向代理位于客户端和服务器之间，它代表客户端发出请求，将客户端的请求转发给目标服务器，然后将服务器的响应返回给客户端。 工作流程： 客户端先向正向代理服务器发送请求。 代理服务器代表客户端与目标服务器建立连接。 目标服务器返回响应给代理服务器。 代理服务器再将响应传回客户端。 典型场景： 访问受限资源：通过代理访问被屏蔽的网站（例如翻墙工具）。 隐匿客户端 IP：隐藏用户的真实 IP，提高匿名性和隐私。 缓存内容：减少多次访问相同资源的网络消耗。 企业内网管理：限制员工访问某些网站或监控上网行为。 示例： 使用 Shadowsocks 或 Squid 实现网络代理访问外网。 通过公司内网的代理服务器访问互联网。 3. 反向代理 vs 正向代理：核心区别 对比维度 反向代理 正向代理 代理对象 服务器（替服务器接收请求） 客户端（替客户端发出请求） 客户端感知 客户端无需知道真实服务器的存在 目标服务器无需知道客户端的存在 隐藏的 IP 隐藏服务器的 IP 隐藏客户端的 IP 适用场景 负载均衡、安全防护、缓存、CORS 处理 匿名上网、访问受限资源、缓存、企业管控 典型应用 Nginx、CDN、API、网关 Shadowsocks、VPN、公司网络代理 4. 总结 正向代理更像是客户端的“助手”，帮助客户端访问外部资源，尤其是那些受限或无法直接访问的资源。 反向代理更像是服务器的“看门人”，代理服务器替后端服务器处理请求，提供安全性、负载均衡和缓存等服务。 简而言之： 正向代理是“我（客户端）无法直接访问，但通过代理我能去”。 反向代理是“你找我（代理服务器）就对了，我帮你转发给正确的后端服务器”。","categories":[{"name":"未分类","slug":"未分类","permalink":"https://www.laoliang.ink/categories/%E6%9C%AA%E5%88%86%E7%B1%BB/"}],"tags":[{"name":"无标签","slug":"无标签","permalink":"https://www.laoliang.ink/tags/%E6%97%A0%E6%A0%87%E7%AD%BE/"}]},{"title":"一文彻底搞懂 CORS 及常见开发调试的解决方案","slug":"一文彻底搞懂 CORS 及常见开发调试的解决方案","date":"2021-10-25T11:25:21.000Z","updated":"2024-11-16T11:26:50.327Z","comments":true,"path":"posts/20211025192521/","link":"","permalink":"https://www.laoliang.ink/posts/20211025192521/","excerpt":"","text":"前言你是否在开发前后端分离项目时遇到过 跨域资源共享 (CORS) 的报错？比如，明明后端已经返回了数据，前端却弹出一个 “Access-Control-Allow-Origin” 的错误。这篇文章将带你深入理解 CORS 的原理，并分享一些常见的开发调试解决方案，帮你在开发过程中游刃有余。 什么是 CORS？CORS（Cross-Origin Resource Sharing）是一种 浏览器安全机制，用于限制来自不同源的请求，以防止潜在的跨站攻击。 简单来说，**”同源”** 是指： 协议、域名、端口号 三者相同例如：https://example.com:8080 和 https://example.com:80 因端口号不同，就被视为 不同源。 浏览器对跨源请求的限制，主要是为了保护用户信息。CORS 的出现，允许服务器明确声明哪些跨源请求是允许的，从而控制前端是否可以正常访问这些资源。 浏览器中的 CORS 行为浏览器根据 HTTP 请求方法 对跨域请求分为两类： 简单请求 (Simple Request) 预检请求 (Preflight Request) 简单请求如果满足以下条件，浏览器会直接发送请求： 请求方法是 GET、POST 或 HEAD。 请求头是简单头：如 Accept、Content-Type: text/plain 等。 没有使用复杂的自定义头。 示例： 1234fetch(&#x27;https://api.example.com/data&#x27;) .then(response =&gt; response.json()) .then(data =&gt; console.log(data)) .catch(error =&gt; console.error(&#x27;CORS 错误:&#x27;, error)); 如果服务器允许这个跨域请求，响应头中会包含如下内容： 1Access-Control-Allow-Origin: * * 表示允许任何来源的请求访问资源。 预检请求对于复杂请求（如 PUT、DELETE 或带有自定义头的请求），浏览器会在发送请求前，先发起一个 OPTIONS 请求，这就是 预检请求。 示例： 12345678fetch(&#x27;https://api.example.com/data&#x27;, &#123; method: &#x27;POST&#x27;, headers: &#123; &#x27;Content-Type&#x27;: &#x27;application/json&#x27;, &#x27;X-Custom-Header&#x27;: &#x27;foobar&#x27; &#125;, body: JSON.stringify(&#123; name: &#x27;John&#x27; &#125;)&#125;); 预检请求的目的是询问服务器： “这个请求可以发送吗？如果可以，我该如何发送？” 响应示例： 1234HTTP/1.1 204 No ContentAccess-Control-Allow-Origin: https://myfrontend.comAccess-Control-Allow-Methods: POST, OPTIONSAccess-Control-Allow-Headers: X-Custom-Header CORS 常见错误及解决方案错误 1：No ‘Access-Control-Allow-Origin’ header is present这是最常见的错误，表示服务器没有返回 Access-Control-Allow-Origin 头。 解决方案： 在服务器端增加响应头： 1234567891011121314// Node.js 示例const express = require(&#x27;express&#x27;);const app = express();app.use((req, res, next) =&gt; &#123; res.setHeader(&#x27;Access-Control-Allow-Origin&#x27;, &#x27;*&#x27;); // 允许所有来源 next();&#125;);app.get(&#x27;/data&#x27;, (req, res) =&gt; &#123; res.json(&#123; message: &#x27;Hello, CORS!&#x27; &#125;);&#125;);app.listen(3000, () =&gt; console.log(&#x27;Server running on port 3000&#x27;)); 注意：生产环境中尽量不要使用 *，而是指定具体的来源，避免安全隐患。 错误 2：CORS Preflight Did Not Succeed这是由于 预检请求 被服务器拒绝。 解决方案： 确保服务器正确处理 OPTIONS 请求： 123456app.options(&#x27;/data&#x27;, (req, res) =&gt; &#123; res.setHeader(&#x27;Access-Control-Allow-Origin&#x27;, &#x27;https://myfrontend.com&#x27;); res.setHeader(&#x27;Access-Control-Allow-Methods&#x27;, &#x27;POST, OPTIONS&#x27;); res.setHeader(&#x27;Access-Control-Allow-Headers&#x27;, &#x27;X-Custom-Header&#x27;); res.sendStatus(204);&#125;); 如果使用 NGINX 代理服务，可以配置： 12345678location /api/ &#123; if ($request_method = OPTIONS) &#123; add_header &#x27;Access-Control-Allow-Origin&#x27; &#x27;https://myfrontend.com&#x27;; add_header &#x27;Access-Control-Allow-Methods&#x27; &#x27;GET, POST, OPTIONS&#x27;; add_header &#x27;Access-Control-Allow-Headers&#x27; &#x27;X-Custom-Header&#x27;; return 204; &#125;&#125; 如何在开发环境中绕过 CORS？在开发过程中，为了快速调试，你可以采用以下方法： 方法 1：使用 Chrome 禁用 CORS 检查你可以通过命令行启动 Chrome，禁用 CORS 检查： 1open -na &quot;Google Chrome&quot; --args --disable-web-security --user-data-dir=/tmp/cors 注意： 此方法仅适用于开发环境，不要在生产环境中使用。 方法 2：使用代理服务器你可以通过前端设置 反向代理，将跨域请求转发到同源服务器。例如，在本地的 webpack 中配置： 123456789101112// webpack.config.jsmodule.exports = &#123; devServer: &#123; proxy: &#123; &#x27;/api&#x27;: &#123; target: &#x27;https://api.example.com&#x27;, changeOrigin: true, // 解决跨域问题 pathRewrite: &#123; &#x27;^/api&#x27;: &#x27;&#x27; &#125;, // 重写路径，将 /api 去掉 &#125;, &#125;, &#125;,&#125;; 使用说明： 上述配置将前端发往 /api 的请求代理到 https://api.example.com。 changeOrigin: true 可以伪造请求来源，避免目标服务器拒绝求。 pathRewrite 将匹配到的 /api 前缀去掉，保证请求路径正确射。 方法 3：安装 CORS 浏览器插件一些浏览器插件可以绕过 CORS 检查，例如 CORS Unblock。虽然方便，但这种方法存在安全风险，建议慎用。 小结CORS 是现代 Web 开发中的重要机制，它帮助浏览器保护用户数据的安全。理解其工作原理并合理配置服务器，可以有效避免开发中的跨域问题。 总结一下，我们可以： 在服务器端设置 Access-Control-Allow-Origin 响应头。 正确处理 预检请求，避免 CORS 请求被拒绝。 在开发环境中使用代理或临时禁用 CORS 检查，提升调试效率。 希望这篇文章能帮助你彻底搞懂 CORS，并在开发过程中得心应手。如果你遇到其他跨域问题，欢迎在评论区交流！","categories":[{"name":"未分类","slug":"未分类","permalink":"https://www.laoliang.ink/categories/%E6%9C%AA%E5%88%86%E7%B1%BB/"}],"tags":[{"name":"无标签","slug":"无标签","permalink":"https://www.laoliang.ink/tags/%E6%97%A0%E6%A0%87%E7%AD%BE/"}]},{"title":"script元素脚本加载详解","slug":"script-元素脚本加载详解","date":"2021-03-20T13:50:35.000Z","updated":"2024-11-16T11:26:50.324Z","comments":true,"path":"posts/20210320215035/","link":"","permalink":"https://www.laoliang.ink/posts/20210320215035/","excerpt":"","text":"我们知道，将 JavaScript 插入 HTML 的主要方法是使用 &lt;script&gt; 元素。这个元素是由网景公司创造出来，并最早在 Netscape Navigator 2 中实现的。后来，这个元素被正式加入到 HTML 规范。 为了更好地了解 JavaScript 在 HTML 中的加载情况，我们先简单介绍一些基础知识。 &lt;script&gt; 元素有下列 8 个属性： async : 可选。表示应该立即开始下载脚本，但不能组织其他页面动作，比如下载资源或等待其他脚本加载。只对外部脚本文件有效。 charset : 可选。使用 src 属性指定的代码字符集。这个属性很少使用，因为大多数浏览器不在乎它的值。 crossorigin : 可选。配置相关请求 CORS（跨域资源共享）设置。默认不适用 CORS。crossorigin=”anonymous” 配置文件请求不必设置凭据标志。 defer : 可选。表示脚本可以延迟到文档完全被解析和显示之后再执行。只对外部脚本文件有效。在 IE7 及更早的版本中，对行内脚本也可以指定这个属性。 integrity : 可选。允许比对接收到和指定的加密签名以验证子资源完整性（SRI，Subresource Integrity）。如果接收到的资源的签名与这个属性指定的签名不匹配，则页面会报错，脚本不会执行。这个属性可以用于确保内容分发网络（CDN，Content Delivery Network）不会提供恶意内容。 language : 废弃。最初用于表示代码块中的脚本语言（如“JavaScript”、“JavaScript 1.2”或“VBScript”）。大多数浏览器都会忽略这个属性，不应该再使用它。 src : 可选。表示包含要执行的代码的外部文件。 type : 可选。代替 language，表示代码块中脚本语言的内容类型（也称 MIME 类型）。按照惯例，这个值始终都是 text/javascript ，尽管 text/javascript 和 ecmascript 都已经废弃了。JavaScript 文件的 MIME 类型通常是 application/x-javascript ，不过给 type 属性这个值有可能 导致脚本被忽略。在非 IE 的浏览器中有效的其他值还有 application/javascript 和 application/ecmascript 。如果这个是 module ，则代码会被当成 ES6 模块，而且只有这时候代码中才能出现 import 和 export 关键字。 外部 JavaScript 的加载与解释使用 src 属性解析外部资源时，会向 src 属性指定的路径发送一个 GET 请求，以取得相应资源，假定是一个 JavaScript 文件。这个初始的请求不受浏览器同源策略限制，但返回并执行的 JavaScript 则受限制。当然，这个请求仍然受父页面 HTTP/HTTPS 协议的限制。 默认状态下，浏览器会按照 &lt;script&gt; 在页面中出现的顺序依次解释它们，前提是它们没有使用 defer 和 async 属性。第二个 &lt;script&gt; 元素的代码必须在第一个 &lt;script&gt; 元素的代码解释完毕才能开始解释，第三个则必须等第二个解释完，以此类推。 标签位置过去，所有 &lt;script 元素都被放在页面的 &lt;head&gt; 标签内，如下面的例子所示： 1234567891011&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;title&gt;Document&lt;/title&gt; &lt;script src=&quot;example11.js&quot;&gt;&lt;/script&gt; &lt;script src=&quot;example12.js&quot;&gt;&lt;/script&gt;&lt;/head&gt;&lt;body&gt; &lt;!-- 这里是页面内容 --&gt;&lt;/body&gt;&lt;/html&gt; 这种做法的主要目的是把外部的 CSS 和 JavaScript 文件都集中放到一起。不过，把所有 JavaScript 文件都放在 &lt;head&gt; 里，也就意味着必须把所有 JavaScript 代码都下载、解析和解释完成后，才能开始渲染页面（页面在浏览器解析到 &lt;body&gt; 的起始标签时开始渲染）。对于需要很多 JavaScript 的页面，这会导致页面渲染的明显延迟，在此期间浏览器窗口完全空白。未解决这个问题，现代 Web 应用程序通常将所有 JavaScript 引用放在 &lt;body&gt; 元素中的页面内容后面，如下面的例子所示： 1234567891011&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;title&gt;Document&lt;/title&gt;&lt;/head&gt;&lt;body&gt; &lt;!-- 这里是页面内容 --&gt; &lt;script src=&quot;example11.js&quot;&gt;&lt;/script&gt; &lt;script src=&quot;example12.js&quot;&gt;&lt;/script&gt;&lt;/body&gt;&lt;/html&gt; 这样一来，页面会在处理 JavaScript 代码之前完全渲染页面。用户会感觉页面加载更快了，因为浏览器显示空白页面的时间短了。 推迟脚本执行（defer）HTML 4.01 为 &lt;script&gt; 元素定义了一个叫 defer 的属性。这个属性表示脚本在执行的时候不会改变页面的结构。也就是说，脚本会被延迟到整个页面都解析完毕后再运行。因此，在 &lt;script&gt; 元素上设置 defer 属性，相当于告诉浏览器立即下载，但延迟执行。 1234567891011&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;title&gt;Document&lt;/title&gt; &lt;script defer src=&quot;example11.js&quot;&gt;&lt;/script&gt; &lt;script defer src=&quot;example12.js&quot;&gt;&lt;/script&gt;&lt;/head&gt;&lt;body&gt; &lt;!-- 这里是页面内容 --&gt;&lt;/body&gt;&lt;/html&gt; 虽然这个例子中的 &lt;script&gt; 元素包含在页面的 &lt;head&gt; 中，但它们会在浏览器解析到结束的 &lt;/html&gt; 标签后才会执行。HTML5 规范要求脚本应该按照它们出现的顺序执行，因此第一个推迟的脚本会在第二个推迟的脚本之前执行，而且两者会在 DOMContentLoaded 事件之前执行。不过在实际当中，推迟执行的脚本不一定总会按顺序执行或者在 DOMContentLoaded 事件之前执行，因此最好只包含一个这样的脚本。 异步执行脚本（async）HTML5 为 &lt;script&gt; 元素定义了 async 属性。从改变脚本处理方式上看，async 属性与 defer 类似。当然，它们两者也都只适用于外部脚本，都会告诉浏览器立即开始下载。不过，与 defer 不同的是，标记为 async 的脚本并不保证能按照它们出现的次序执行，比如： 1234567891011&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;title&gt;Document&lt;/title&gt; &lt;script async src=&quot;example11.js&quot;&gt;&lt;/script&gt; &lt;script async src=&quot;example12.js&quot;&gt;&lt;/script&gt;&lt;/head&gt;&lt;body&gt; &lt;!-- 这里是页面内容 --&gt;&lt;/body&gt;&lt;/html&gt; 在这个例子中，第二个脚本可能先于第一个脚本执行。因此，重点在于它们之间没有依赖关系。给脚本添加 async 属性的目的是告诉浏览器，不必等脚本下载和执行完后再加载页面，同样也不必等到该一步脚本下载和执行后再加载其他脚本。正因为如此，异步脚本不应该在加载期间修改 DOM。 异步脚本保证会在页面的 load 事件前执行，但可能会在 DOMContentLoaded 之后或之前。 脚本加载时机对比 我们上一张图👆 绿色 parser：指的是 HTML 引擎的解析，解析 HTML 文本的解析器 蓝色 fetch：代表的是获取脚本资源 红色 execution：代表的脚本的执行 默认情况下默认情况下，脚本的加载和解析执行，会中断 HTML 文本的解析。 这是由于，由于 JS 解析引擎 和 浏览器渲染引擎，是互斥的，JS 在解析执行过程中，GUI渲染线程会被挂起（渲染的当前状态会被保存）。当 JS 执行结束后，渲染线程才会继续。 使用 defer 属性时使用 defer 属性，脚本的获取加载过程不会中断 HTML 文本的解析，而是通过异步的方式获取脚本。但是，此时脚本的解析执行，仍然要等到 HTML 文本的解析结束后。 使用 async 属性时使用 async 属性时，与 defer 相似的是，脚本的加载同样是异步的方式，不同的是，脚本的解析执行不依赖 HTML 文档的解析结束，脚本会在加载完成后立即解析执行，且这时候会中断 HTML 文本的解析。 针对 type=”module” 的加载执行上面的基础知识部分提到，使用 type=&quot;module&quot; 标记的 &lt;script&gt; 元素，代码会被当成 ES6 模块。 这时候脚本的加载和执行逻辑默认和 defer 属性标记时的规则是一致的，当遇到 &lt;script&gt; 标签元素时，脚本会从模块入口异步开始加载，过程中可能会分叉去加载引用的其他脚本，最后回到入口模块，整个加载过程不会中断 HTML 文本的解析。而脚本的解析执行则像加了 defer 属性一样，需要等待 HTML 文本解析结束后才能开始。 若 使用 type=&quot;module&quot; 时，同时使用 async 属性，那么脚本的解析执行会在加载完成后立即进行，且解析执行过程会中断 HTML 文本的解析。 总结我们知道 &lt;script&gt; 标签是在网页中使用 JavaScript 的最根本的机制，所以，对这些加载时机和各种属性的理解，对我们将来做性能优化和提升脚本的安全性是非常重要的。","categories":[{"name":"未分类","slug":"未分类","permalink":"https://www.laoliang.ink/categories/%E6%9C%AA%E5%88%86%E7%B1%BB/"}],"tags":[{"name":"无标签","slug":"无标签","permalink":"https://www.laoliang.ink/tags/%E6%97%A0%E6%A0%87%E7%AD%BE/"}]},{"title":"一种适合小团队的Git协作流程","slug":"一种适合小团队的Git协作流程","date":"2021-03-13T14:37:31.000Z","updated":"2024-11-16T11:26:50.327Z","comments":true,"path":"posts/20210313223731/","link":"","permalink":"https://www.laoliang.ink/posts/20210313223731/","excerpt":"","text":"团队开发中，遵循一个合理、清晰的Git使用流程，是非常重要的 否则，每个人都提交一堆杂乱无章的commit，项目很快就会变得难以协调和维护 分支介绍 master - 主分支 所有提供给用户使用的正式版本，都在这个主分支上发布 开发者在此分支 不可进行 push 操作 dev - 开发分支 日常开发所使用的分支，开发者完成的阶段性功能模块将首先被合并到此分支 此分支亦是团队内部测试、阶段性工作验证所使用的分支 开发者在此分支 不可进行 push 操作，只能通过 Pull Request 的方式将个人分支合并到此分支 开发过程中，要经常与此分支保持同步 feature/xxx - 特性分支 用于某个功能模块的开发，例如：张三创建了一个 feature/package-manager 分支负责开发包管理器模块 当该功能模块开发任务完成后，通过 Pull Request 的形式进行请求合并，管理员 Code Review 通过后，将该分支合并到 dev 分支；此后，该分支将被删除 一旦完成开发，它们就会被合并进 dev 分支（仅能通过 Pull Request 的方式），然后被删除 此类分支由开发者个人管理和使用， 可以进行 push 操作 开发过程中，此类分支要经常与 dev 分支保持同步 hotfix/xxx - 补丁分支 用于紧急修复 Bug 的分支，可以由 master 或 dev 分支创建 同 feature/xxx 分支一样，一旦修复工作完成，它们就会被合并进 master 或 dev 分支 （仅能通过 Pull Request 的方式），然后就被删除 工作流程12# 开发前克隆 dev 分支到本地git clone -b dev https://github.com/liangpengyv/vue-mvvm.git 第一步：新建分支首先，每次开发新功能，都应该新建一个单独的分支 12345678# 获取 dev 分支最新代码git checkout devgit pull# 新建一个特性分支git branch feature/xxx# 切换到该特性分支，进行开发git checkout feature/xxx 第二部：提交分支分支修改后，就可以提交了 123456# 提交代码git add .git commit# 开发过程中，将本地仓库开发中的特性分支 push 到远程仓库（可选的）git push -u origin feature/xxx git push 的 -u 参数，表示将远程仓库 origin/feature/xxx 与 本地仓库 feature/xxx 建立关联，下一次执行 push 命令，可省略后面的远程仓库名和分支名，直接输入 git push 即可 第三步：与 dev 主干同步分支的开发过程中，要经常与 dev 主干保持同步 12345678# 获取 dev 分支最新代码git checkout devgit pull# 切换回当前开发的特性分支git checkout feature/xxx# 合并 dev 分支到当前分支git merge dev 第四步：发出 Pull Request完成当前特性分支的所有开发任务，进行最后一次 与 dev 主干同步 工作，并提交到远程仓库以后，就可以发出 Pull Request 到 dev 分支，然后请求管理员进行 Code Review ，确认可以合并到 dev 分支 1234567# 最后进行一次步骤三的同步工作# 提交到远程仓库git checkout feature/xxxgit push origin feature/xxx# 在 GitHub 管理界面创建 Pull Request，等待管理员进行 Code Review 第五步：清理无用的分支某个特性分支开发任务全部完成后，应删除它 12345678# 首先，切换回 dev 分支git checkout dev# 先删除远程特性分支git push origin -d feature/xxx# 再删除本地特性分支git branch -d feature/xxx","categories":[{"name":"未分类","slug":"未分类","permalink":"https://www.laoliang.ink/categories/%E6%9C%AA%E5%88%86%E7%B1%BB/"}],"tags":[{"name":"无标签","slug":"无标签","permalink":"https://www.laoliang.ink/tags/%E6%97%A0%E6%A0%87%E7%AD%BE/"}]},{"title":"Vue的双向绑定原理及简单实现","slug":"Vue的双向绑定原理及简单实现","date":"2021-03-06T01:45:02.000Z","updated":"2024-11-16T11:26:50.323Z","comments":true,"path":"posts/20210306094502/","link":"","permalink":"https://www.laoliang.ink/posts/20210306094502/","excerpt":"","text":"Vue 数据双向绑定原理Vue 数据双向绑定是通过 数据劫持 结合 发布者-订阅者模式 的方式来实现的。 我们先来看下定义在 Vue 初始化数据上的对象是什么样的 代码： 12345678910new Vue(&#123; data: &#123; obj: &#123; foo: 1, &#125;, &#125;, created() &#123; console.log(this.obj) &#125;,&#125;) 结果： 可以看到属性 foo 有两个对应的 get 和 set 方法，这两个方法是如何出现的呢？这是因为 Vue 通过 Object.defineProperty() 来实现数据劫持的，它可以控制对象属性的一些特有操作，如读写权限、是否可枚举等，这里着重关注 get 和 set 两个函数。（有关 Object.defineProperty() 的更多内容，请点击 👆MDN-Object.defineProperty） 首先，我们使用字面量形式初始化一个对象属性 代码： 12345let book = &#123; name: &#x27;JavaScript高级程序设计&#x27;,&#125;console.log(book.name)console.log(book) 结果： 我们重新使用 Object.defineProperty() 的方式来定义对象属性，并对其 get 和 set 方法进行重写操作 代码： 12345678910111213let book = &#123;&#125;Object.defineProperty(book, &#x27;name&#x27;, &#123; get: () =&gt; &#123; return &#x27;《&#x27; + this.name + &#x27;》&#x27; &#125;, set: (value) =&gt; &#123; this.name = value console.log(&#x27;设置 name 属性值为：&#x27; + value) &#125;,&#125;)book.name = &#x27;JavaScript高级程序设计&#x27;console.log(book.name)console.log(book) 结果： 可以看到，这次打印出来的数据，和通过 Vue 初始化的数据结构比较像了吧，它也有了 get 和 set 函数，这正是 Vue 实现 数据劫持 的实现原理。 MVVM 实现思路分析实现 MVVM 主要包含两个方面： 数据变化更新视图 视图变化更新数据 其中，view 更新 data 只需要通过事件监听即可，重点是 data 更新 view 是如何做到的呢？ 其实，上文 数据劫持 的示例已经给出了答案。通过 Object.defineProperty() 对属性设置一个 set 函数，当数据改变时，set 函数就会被触发，所以我们只需要将更新 view 的方法写到这里，就可以实现 data 更新 view 了。 实现一个监听器 Observer监听器 的作用就是去监听数据的每一个属性，通过上面的例子，我们知道可以用 Object.defineProperty() 方法实现。 当监听到属性值发生变化时，通知 订阅者 Watcher 执行更新函数去更新视图。 这个过程中，会有许多订阅者，所以我们还需要创建一个 订阅器 Dep 来统一管理，订阅器 Dep 有一个容器 subs，负责收集订阅者。 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849function defineReactive(data, key, value) &#123; // 递归遍历所有子属性 observe(value) let dep = new Dep() Object.defineProperty(data, key, &#123; enumerable: true, configurable: true, get: function reactiveGetter() &#123; if (Dep.target) &#123; dep.addSub(Dep.target) &#125; return value &#125;, set: function reactiveSetter(newValue) &#123; if (value === newValue) &#123; return &#125; value = newValue dep.notify() &#125; &#125;)&#125;function observe(data) &#123; if (!data || typeof data !== &#x27;object&#x27;) &#123; return &#125; Object.keys(data).forEach(key =&gt; &#123; defineReactive(data, key, data[key]) &#125;)&#125;function Dep() &#123; this.subs = []&#125;Dep.prototype = &#123; addSub(sub) &#123; this.subs.push(sub) &#125;, notify() &#123; this.subs.forEach(sub =&gt; &#123; sub.update() &#125;) &#125;&#125;Dep.target = null 实现一个订阅者 Watcher订阅者 Watcher 的作用主要是接收属性变化的通知，然后去执行视图更新函数。 订阅者 Watcher 初始化时，需要将自己添加到订阅器 Dep 中。我们已经知道在监听器 Observer 的 get 函数中通过订阅器 Dep 执行了添加订阅者 Wather 的操作，所以只需要在 Watcher 初始化时触发 Observer 的 get 函数即可。而要触发 get 函数，只要获取对应的属性值便可触发了，这正是因为我们使用了 Object.defineProperty() 进行数据监听。 123456789101112131415161718192021222324function Watcher(vm, exp, cb) &#123; this.vm = vm this.exp = exp this.cb = cb this.value = this.get()&#125;Watcher.prototype = &#123; update() &#123; const value = this.vm.$data[this.exp] const oldValue = this.value if (value !== oldValue) &#123; this.value = value this.cb(value) &#125; &#125;, get() &#123; Dep.target = this const value = this.vm.$data[this.exp] Dep.target = null return value &#125;&#125; 实现一个解析器 Compile解析器 Compile 的作用主要有两个方面： 解析 DOM 节点，识别出模板指令，替换模板数据 对模板指令的节点添加订阅者，绑定更新函数 为实现这两点功能，我们有如下代码： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100function Compile(vm) &#123; this.vm = vm this.el = vm.$el this.fragment = null this.init()&#125;Compile.prototype = &#123; init() &#123; this.fragment = this.nodeToFragment(this.el) this.compileNode(this.fragment) this.el.appendChild(this.fragment) &#125;, nodeToFragment(el) &#123; const fragment = document.createDocumentFragment() let child = el.firstChild while (child) &#123; fragment.appendChild(child) child = el.firstChild &#125; return fragment &#125;, compileNode(fragment) &#123; let childNodes = fragment.childNodes const childNodesArray = [...childNodes] childNodesArray.forEach(node =&gt; &#123; if (this.isElementNode(node)) &#123; this.compile(node) &#125; let reg = /\\&#123;\\&#123;(.*)\\&#125;\\&#125;/ let text = node.textContent if (reg.test(text)) &#123; let prop = reg.exec(text)[1] this.compileText(node, prop) &#125; if (node.childNodes &amp;&amp; node.childNodes.length) &#123; this.compileNode(node) &#125; &#125;) &#125;, compile(node) &#123; let nodeAttrs = node.attributes const nodeAttrsArray = [...nodeAttrs] nodeAttrsArray.forEach(attr =&gt; &#123; let name = attr.name if (this.isDirective(name)) &#123; let value = attr.value if (name === &#x27;v-model&#x27;) &#123; this.compileModel(node, value) &#125; &#125; &#125;) &#125;, compileModel(node, prop) &#123; let val = this.vm.$data[prop] this.updateModel(node, val) new Watcher(this.vm, prop, value =&gt; &#123; this.updateModel(node, value) &#125;) node.addEventListener(&#x27;input&#x27;, event =&gt; &#123; let newValue = event.target.value if (val === newValue) &#123; return &#125; this.vm.$data[prop] = newValue &#125;) &#125;, compileText(node, prop) &#123; let text = this.vm.$data[prop] this.updateView(node, text) new Watcher(this.vm, prop, value =&gt; &#123; this.updateView(node, value) &#125;) &#125;, updateModel(node, value) &#123; node.value = typeof value === &#x27;undefined&#x27; ? &#x27;&#x27; : value &#125;, updateView(node, value) &#123; node.textContent = typeof value === &#x27;undefined&#x27; ? &#x27;&#x27; : value &#125;, isDirective(attr) &#123; return attr.indexOf(&#x27;v-&#x27;) !== -1 &#125;, isElementNode(node) &#123; return node.nodeType === 1 &#125;, isTextNode(node) &#123; return node.nodeType === 3 &#125;,&#125; 这段较长的代码，其核心目的就是实现上面说的 2 点功能。 其中，在解析 DOM 过程中，因为会频繁操作 DOM，所以这里先将其缓存到一个 fragment 中，然后再进行解析，解析编译完成后，再把 fragment 添加到页面中。 这里我们只是简单的实现了差值表达式 &#123;&#123;&#125;&#125; 和 v-model 的识别。 创建 MyVue这里我们创建一个 MyVue 类，来连接 Observer、Watcher、Compile。 1234567891011121314151617181920212223242526function MyVue(options) &#123; this.$el = document.querySelector(options.el) this.$data = options.data this.init()&#125;MyVue.prototype = &#123; init() &#123; this.proxyData(this) observe(this.$data) new Compile(this) &#125;, proxyData(vm) &#123; Object.keys(vm.$data).forEach(key =&gt; &#123; Object.defineProperty(vm, key, &#123; get: function proxyGetter() &#123; return vm.$data[key] &#125;, set: function proxySetter(value) &#123; vm.$data[key] = value &#125; &#125;) &#125;) &#125;&#125; 使用 MyVue 替换 Vue现在，我们使用 MyVue 来替换 Vue 接管我们的视图。 12345678910111213141516171819202122232425262728293031323334353637383940&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;!-- ... --&gt;&lt;/head&gt;&lt;body&gt; &lt;div id=&quot;app&quot;&gt; &lt;input v-model=&#x27;name&#x27;&gt; &lt;p&gt;&#123;&#123;name&#125;&#125;&lt;/p&gt; &lt;/div&gt;&lt;/body&gt;&lt;!-- &lt;script src=&quot;vender/vue.js&quot;&gt;&lt;/script&gt; --&gt;&lt;script src=&quot;js/observer.js&quot;&gt;&lt;/script&gt;&lt;script src=&quot;js/watcher.js&quot;&gt;&lt;/script&gt;&lt;script src=&quot;js/compile.js&quot;&gt;&lt;/script&gt;&lt;script src=&quot;js/index.js&quot;&gt;&lt;/script&gt;&lt;script&gt; // let app = new Vue(&#123; // el: &#x27;#app&#x27;, // data: &#123; // name: &#x27;JavaScript&#x27;, // &#125; // &#125;) // console.log(app) let myApp = new MyVue(&#123; el: &#x27;#app&#x27;, data: &#123; name: &#x27;JavaScript&#x27;, &#125; &#125;) console.log(myApp)&lt;/script&gt;&lt;/html&gt; 到这里，我们便实现了一个简单的数据双向绑定。 完整源码完整源码请点击 👆GitHub-vue-mvvm 查看","categories":[{"name":"未分类","slug":"未分类","permalink":"https://www.laoliang.ink/categories/%E6%9C%AA%E5%88%86%E7%B1%BB/"}],"tags":[{"name":"无标签","slug":"无标签","permalink":"https://www.laoliang.ink/tags/%E6%97%A0%E6%A0%87%E7%AD%BE/"}]},{"title":"git stash 命令详解","slug":"git stash 命令详解","date":"2020-09-12T12:14:32.000Z","updated":"2024-11-16T11:26:50.323Z","comments":true,"path":"posts/20200912201432/","link":"","permalink":"https://www.laoliang.ink/posts/20200912201432/","excerpt":"","text":"1. 开篇：啥子是 git stash？你在开发时是不是遇到过这种情况：代码改了一半，突然有个紧急任务来了，比如老板喊你切换到另一个分支修个 Bug。问题来了，你这没提交的代码咋办？提交了怕污染代码库，不提交又不想丢掉。这时候，git stash 就派上用场了！它就像一个临时储物柜，帮你把当前的修改存起来，等你忙完了再拿出来继续干活。 2. 基础用法：怎么存？怎么拿？（1）存起来：git stash执行以下命令，就能把当前工作区的修改存到”储物柜”里： 1git stash 效果：你的工作区会变得干干净净，就像啥子都没改过一样。 （2）取出来：git stash pop等你忙完了，回到原来的分支，可以用下面的命令把改动拿回来： 1git stash pop 效果：储物柜里的东西回来了，而且这条存档就自动删掉了。 （3）只想看一眼：git stash apply有时候你只是想把改动拿回来看看，但不想删掉储物柜里的存档： 1git stash apply 区别：存档还在，你可以多次 apply。 3. 深入探索：stash 的更多玩法（1）查看所有存档：git stash list你可能不止一次用 stash，用这个命令可以列出所有的存档： 1git stash list 输出可能像这样： 12stash@&#123;0&#125;: WIP on main: 123abc4 修复样式问题stash@&#123;1&#125;: WIP on feature: 添加用户登录功能 stash@{0} 是最新的存档，数字越大，说明存的时间越久。 （2）恢复指定存档：git stash apply stash@{n}如果你想恢复某个特定的存档，比如 stash@{1}： 1git stash apply stash@&#123;1&#125; （3）删掉存档：git stash drop存档用完了或者不需要了，可以用下面的命令删除： 1git stash drop stash@&#123;0&#125; （4）全部清理：git stash clear不想一个个删？直接全部清掉： 1git stash clear 4. 进阶用法：部分保存与冲突处理（1）只保存未跟踪的文件：git stash -u默认情况下，stash 只保存已跟踪的文件。如果你有些新文件还没 git add，可以用： 1git stash -u 这样连没跟踪的文件也一块存起来。 （2）解决冲突：stash pop 也会出问题？如果你在 stash pop 的时候，和当前分支代码有冲突，那 Git 会提示冲突，和 git merge 的冲突处理一样，需要手动修改完再提交： 123# 修改冲突文件后git add .git commit -m &quot;解决冲突&quot; 5. 总结：git stash 的正确姿势 救急神器：适合临时切换任务、不想提交一半改动的时候用。 谨慎使用：如果你 stash 太多次而不清理，容易忘记存了啥子。 配合 pop 和 apply：合理选择是直接删掉存档（pop），还是保留存档（apply）。 6. 结语：工具虽小，管用就行git stash 这个命令看起简单，但在开发工作中真是个大救星！它让你不再因为各种紧急情况而打乱手头的代码节奏。只要掌握好 stash 的基本用法和一些进阶技巧，你就能更从容地在多个任务之间切换，再也不怕自己的代码乱七八糟了。","categories":[{"name":"未分类","slug":"未分类","permalink":"https://www.laoliang.ink/categories/%E6%9C%AA%E5%88%86%E7%B1%BB/"}],"tags":[{"name":"无标签","slug":"无标签","permalink":"https://www.laoliang.ink/tags/%E6%97%A0%E6%A0%87%E7%AD%BE/"}]},{"title":"模拟实现 JavaScript 的 apply call 及 bind 函数","slug":"模拟实现-JavaScript-的-apply-call-及-bind-函数","date":"2020-06-04T02:52:36.000Z","updated":"2024-11-16T11:26:50.322Z","comments":true,"path":"posts/20200604105236/","link":"","permalink":"https://www.laoliang.ink/posts/20200604105236/","excerpt":"","text":"在 JavaScript 中，apply、call 和 bind 方法都是为了改变某个函数运行时的上下文（context）而存在的，换句话说，就是为了改变函数体内部 this 的指向。 改变 this 指向我们看下面一段代码： 123456789101112131415161718192021var name = &#x27;GlobalName&#x27;var obj = &#123; name: &#x27;ObjName&#x27;&#125;function getName(arg1, arg2) &#123; console.log(this.name, arg1, arg2) // 函数内部调用 this&#125;// this 指向全局对象getName(1, 2)// 预期输出：GlobalName 1 2// 改变 this 指向为 objgetName.apply(obj, [1, 2])getName.call(obj, 1, 2)getName.bind(obj, 1, 2)()// 预期输出：// ObjName 1 2// ObjName 1 2// ObjName 1 2 通过上面一段代码可以看出，我们可以通过 apply、call 和 bind 方法，改变调用 getName() 函数的 运行时上下文，从而改变运行时函数内部的 this 指向。 三个方法的功能区别Function.prototype.apply()apply() 方法调用一个具有给定this值的函数，以及以一个数组（或类数组对象）的形式提供的参数。 Function.prototype.call()call() 方法使用一个指定的 this 值和单独给出的一个或多个参数来调用一个函数。 注意：call() 方法的作用和 apply() 方法类似，区别就是 call() 方法接受的是 参数列表，而 apply() 方法接受的是 一个参数数组。 Function.prototype.bind()bind() 方法创建一个新的函数，在 bind() 被调用时，这个新函数的 this 被指定为 bind() 的第一个参数，而其余参数将作为新函数的参数，供调用时使用。 注意：bind() 是返回对应函数，便于稍后调用，apply() 、call() 则是立即调用。 模拟实现 apply、call 及 bind实现 myApply()12345678910111213141516171819202122// 实现 apply 函数Function.prototype.myApply = function (context) &#123; // 判断调用 myApply 的是 function 吗 if (typeof this !== &#x27;function&#x27;) &#123; throw new Error(&#x27;type error&#x27;) &#125; // 获取参数 let args = arguments[1] // 将调用函数设置为对象的方法 context.fn = this // 调用函数 let result = context.fn(...args) // 删除属性 delete context.fn return result&#125;getName.myApply(obj, [1, 2]) // 预期输出：ObjName 1 2 实现 myCall()12345678910111213141516171819202122// 实现 call 函数Function.prototype.myCall = function (context) &#123; // 判断调用 myCall 的是 function 吗 if (typeof this !== &#x27;function&#x27;) &#123; throw new Error(&#x27;type error&#x27;) &#125; // 获取参数 let args = [...arguments].slice(1) // 将调用函数设置为对象的方法 context.fn = this // 调用函数 let result = context.fn(...args) // 删除属性 delete context.fn return result&#125;getName.myCall(obj, 1, 2) // 预期输出：ObjName 1 2 实现 myBind()123456789101112131415161718// 实现 bind 函数Function.prototype.myBind = function (context) &#123; // 判断 myBind 的是 function 吗 if (typeof this !== &#x27;function&#x27;) &#123; throw new Error(&#x27;type error&#x27;) &#125; // 获取参数 let args = [...arguments].slice(1) // 将调用函数暂存 let fn = this return function () &#123; return fn.myApply(context, args) &#125;&#125;getName.myBind(obj, 1, 2)() // 预期输出：ObjName 1 2","categories":[{"name":"未分类","slug":"未分类","permalink":"https://www.laoliang.ink/categories/%E6%9C%AA%E5%88%86%E7%B1%BB/"}],"tags":[{"name":"无标签","slug":"无标签","permalink":"https://www.laoliang.ink/tags/%E6%97%A0%E6%A0%87%E7%AD%BE/"}]},{"title":"JavaScript 创建对象，从古至今","slug":"JavaScript 创建对象，从古至今","date":"2020-06-02T07:31:18.000Z","updated":"2024-11-16T11:26:50.322Z","comments":true,"path":"posts/20200602153118/","link":"","permalink":"https://www.laoliang.ink/posts/20200602153118/","excerpt":"","text":"JavaScript 的对象系统是这个语言的基石之一。随着 JavaScript 的不断演进，对象创建的方式也在逐步丰富。本篇将带你回顾 JavaScript 中创建对象的多种方式，从早期的经典用法到现代的高级特性。 1. 最基础的对象字面量JavaScript 最简单、最直观的对象创建方式就是使用对象字面量。这是一种简洁的语法，非常适合用来创建简单对象。 123456789const person = &#123; name: &quot;Alice&quot;, age: 25, greet() &#123; console.log(`Hi, I&#x27;m $&#123;this.name&#125;`); &#125;&#125;;person.greet(); // 输出: Hi, I&#x27;m Alice 优点： 简单易懂，语法直观 适合创建静态数据结构 缺点： 适用于简单对象，复杂逻辑难以复用 2. 构造函数：带来可复用性JavaScript 在早期版本（ES5 之前）没有类的概念，但通过构造函数模拟类的功能。构造函数是用 function 定义的，并与 new 关键字一起使用。 1234567891011function Person(name, age) &#123; this.name = name; this.age = age;&#125;Person.prototype.greet = function () &#123; console.log(`Hi, I&#x27;m $&#123;this.name&#125;`);&#125;;const bob = new Person(&quot;Bob&quot;, 30);bob.greet(); // 输出: Hi, I&#x27;m Bob 优点： 实现了简单的面向对象编程 通过 prototype 共享方法，节省内存 缺点： 语法不够直观，相比其他语言的类显得笨拙 3. ES6 类：语法糖的出现在 ES6（2015）中，JavaScript 引入了类（class）关键字，进一步优化了面向对象编程的体验。类本质上是对构造函数的封装，但语法更加清晰。 12345678910111213class Person &#123; constructor(name, age) &#123; this.name = name; this.age = age; &#125; greet() &#123; console.log(`Hi, I&#x27;m $&#123;this.name&#125;`); &#125;&#125;const charlie = new Person(&quot;Charlie&quot;, 35);charlie.greet(); // 输出: Hi, I&#x27;m Charlie 优点： 更符合面向对象语言的习惯 支持继承和静态方法 缺点： 只是语法糖，本质上还是基于 prototype 4. 工厂函数：灵活的对象创建有时候，我们希望避免 new 关键字的使用，并灵活控制对象的创建逻辑。这时，工厂函数是一种很好的选择。工厂函数是返回对象的普通函数，不依赖类和构造函数。 123456789101112function createPerson(name, age) &#123; return &#123; name, age, greet() &#123; console.log(`Hi, I&#x27;m $&#123;name&#125;`); &#125; &#125;;&#125;const dave = createPerson(&quot;Dave&quot;, 28);dave.greet(); // 输出: Hi, I&#x27;m Dave 优点： 不需要 new 关键字，避免 this 绑定问题 适合复杂对象创建逻辑和闭包 缺点： 不具备类的继承特性，需要手动管理方法共享 5. 对象的动态扩展与 Object.create()JavaScript 允许动态扩展对象，也可以通过 Object.create() 创建基于某个原型的对象。这种方法提供了更灵活的继承方式。 123456789const protoPerson = &#123; greet() &#123; console.log(`Hi, I&#x27;m $&#123;this.name&#125;`); &#125;&#125;;const emily = Object.create(protoPerson);emily.name = &quot;Emily&quot;;emily.greet(); // 输出: Hi, I&#x27;m Emily 优点： 直接创建继承关系，避免类的复杂性 非常适合需要原型链操作的场景 缺点： 不如 class 语法直观 6. ES2020 的私有属性：更加完善的类支持在 ES2020 中，引入了私有属性（# 开头），让 JavaScript 的类系统更接近传统面向对象语言。 12345678910111213141516class Person &#123; #secret; // 私有属性 constructor(name, age, secret) &#123; this.name = name; this.age = age; this.#secret = secret; &#125; revealSecret() &#123; console.log(`My secret is: $&#123;this.#secret&#125;`); &#125;&#125;const frank = new Person(&quot;Frank&quot;, 40, &quot;I love coding&quot;);frank.revealSecret(); // 输出: My secret is: I love coding 优点： 提供真正的私有属性，提升数据封装性 避免意外访问和修改 缺点： 旧版浏览器不支持，需要 Babel 等工具转译 7. 总结：百花齐放的对象创建方式JavaScript 对象的创建方式，从最简单的字面量，到构造函数模拟类，再到现代的class 和 私有属性，每一种方式都有其特定的应用场景和优劣。 字面量：快速创建简单对象 构造函数：模拟类，支持原型共享 class：语法更优雅，适合复杂对象 工厂函数：灵活控制对象逻辑 Object.create()：灵活操作原型链 私有属性：提高封装性 未来，随着 JavaScript 的持续发展，我们可能会看到更多对象相关的新特性被引入。希望这篇博客能帮助你理清思路，选择最适合的方式来创建和管理对象。","categories":[{"name":"未分类","slug":"未分类","permalink":"https://www.laoliang.ink/categories/%E6%9C%AA%E5%88%86%E7%B1%BB/"}],"tags":[{"name":"无标签","slug":"无标签","permalink":"https://www.laoliang.ink/tags/%E6%97%A0%E6%A0%87%E7%AD%BE/"}]},{"title":"JavaScript 中 forEach 的不可中断性","slug":"JavaScript 中 forEach 的不可中断性","date":"2020-06-01T01:44:27.000Z","updated":"2024-11-16T11:26:50.322Z","comments":true,"path":"posts/20200601094427/","link":"","permalink":"https://www.laoliang.ink/posts/20200601094427/","excerpt":"","text":"在 JavaScript 的数组操作中，forEach 是我们经常使用的遍历方法。然而，当我们需要在遍历过程中 提前退出（如遇到特定条件时停止迭代）时，forEach 却无法像 for 循环那样通过 break 或 return 来中断。这种不可中断性经常会给开发者带来困惑。本文将详细介绍 forEach 的特性、工作机制，并给出一些替代方案，帮助你在合适的场景下做出更优的选择。 1. forEach 的基本使用forEach 是 JavaScript 中数组对象的原型方法，用于对数组中的每个元素执行一次指定的回调函数。其典型用法如下： 1234const numbers = [1, 2, 3, 4];numbers.forEach((num) =&gt; &#123; console.log(num);&#125;); 输出： 12341234 回调函数会按照顺序依次执行，但无法通过 break、continue 或 return 来提前终止这次遍历。即使回调函数内部显式使用 return，也只是结束当前回调函数的执行，并不会跳过或中断整个遍历。 2. forEach 不可中断性的表现官方文档中的描述： “除非抛出异常，否则没有办法停止或中断 forEach() 循环。如果有这样的需求，则不应该使用 forEach() 方法。” 这句话直接点明了 forEach 的局限性：如果在遍历过程中需要满足某个条件时提前停止，则不应使用 forEach。如果强行使用，可能会导致程序逻辑不符合预期。 示例： 我们来看一个例子，尝试在回调函数中使用 return 结束遍历： 12345const numbers = [1, 2, 3, 4];numbers.forEach((num) =&gt; &#123; if (num === 3) return; // 期望在遇到 3 时跳过 console.log(num);&#125;); 实际输出： 123124 分析：上例中的 return 只结束了当前回调函数的执行，相当于 continue 的效果，而不是跳过或终止整个遍历。为了实现完全停止遍历的需求，我们需要使用其他工具。 3. forEach 与 for 循环的对比如果你希望在遇到某个元素时 停止遍历，for 循环是一种更合适的选择。以下是同样逻辑的 for 循环实现： 12345const numbers = [1, 2, 3, 4];for (const num of numbers) &#123; if (num === 3) break; // 遇到 3 时停止遍历 console.log(num);&#125; 输出： 1212 在这种情况下，for 循环允许我们使用 break 直接退出。 4. 如何在复杂逻辑中替代 forEach尽管 forEach 无法中断，但你可以根据需求选择其他遍历方法： 4.1 使用 some 或 every• some：只要回调函数返回 true，就会停止遍历。 • every：只要回调函数返回 false，就会停止遍历。 123456const numbers = [1, 2, 3, 4];numbers.some((num) =&gt; &#123; if (num === 3) return true; // 遇到 3 时停止遍历 console.log(num); return false;&#125;); 输出： 1212 4.2 使用 for…offor…of 是一种支持 break 和 continue 的遍历方式： 1234for (const num of numbers) &#123; if (num === 3) break; console.log(num);&#125; 5. forEach 的应用场景尽管 forEach 存在不可中断的限制，但在某些场景下，它依然非常适用： 5.1 对所有元素执行副作用操作：如打印日志、发送 API 请求等不需要中断的任务。 12const logs = [&#x27;登录成功&#x27;, &#x27;查询数据&#x27;, &#x27;操作失败&#x27;];logs.forEach((log) =&gt; console.log(log)); 5.2 需要对数组中的所有元素逐一操作且不考虑中断：如果逻辑上无条件处理所有元素，forEach 使代码更加简洁。 6. 总结与思考forEach 是一个简洁的遍历工具，但它的不可中断性让它在某些情况下显得不够灵活。如果你需要在遍历过程中提前退出或跳过某些元素，请考虑使用其他遍历方式，如 for、for…of、some 或 every。 在选择工具时，请记住 MDN 的建议：“如果有中断遍历的需求，不应该使用 forEach()。” 了解并合理使用 JavaScript 的不同遍历方式，能够帮助你写出更加高效、清晰的代码。 想了解更多细节，请参考 MDN 的官方文档：Array.prototype.forEach()。","categories":[{"name":"未分类","slug":"未分类","permalink":"https://www.laoliang.ink/categories/%E6%9C%AA%E5%88%86%E7%B1%BB/"}],"tags":[{"name":"无标签","slug":"无标签","permalink":"https://www.laoliang.ink/tags/%E6%97%A0%E6%A0%87%E7%AD%BE/"}]},{"title":"使用反向代理解决前端开发环境下的 CORS 问题","slug":"使用反向代理解决前端开发环境下的 CORS 问题","date":"2020-04-23T08:24:19.000Z","updated":"2024-11-16T11:26:50.322Z","comments":true,"path":"posts/20200423162419/","link":"","permalink":"https://www.laoliang.ink/posts/20200423162419/","excerpt":"","text":"要解决前端开发环境下的 CORS（跨域资源共享） 问题，常见的解决方案是使用反向代理。以下是几种常见的实现方式： 1. 使用 Nginx 反向代理Nginx 是一个轻量级、高性能的 Web 服务器，用于在开发或生产环境下处理跨域问题。 配置示例： 在 Nginx 的配置文件中添加一段反向代理规则： 12345678910111213141516server &#123; listen 80; server_name localhost; location /api/ &#123; proxy_pass http://backend-service:8080/; # 转发请求到后端服务 proxy_set_header Host $host; proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; # 处理CORS add_header Access-Control-Allow-Origin *; add_header Access-Control-Allow-Methods GET, POST, OPTIONS; add_header Access-Control-Allow-Headers Authorization, Content-Type; &#125;&#125; 优点： 稳定、可用于生产环境。 高度可配置，适合复杂场景。 缺点： 需要安装并配置 Nginx。 2. 使用 Node.js + Express 反向代理Express 是常见的 Node.js Web 框架，可以简单实现反向代理。 实现示例： 1234567891011121314151617const express = require(&#x27;express&#x27;);const &#123; createProxyMiddleware &#125; = require(&#x27;http-proxy-middleware&#x27;);const app = express();app.use(&#x27;/api&#x27;, createProxyMiddleware(&#123; target: &#x27;http://backend-service:8080&#x27;, // 后端服务地址 changeOrigin: true, // 修改请求头中的 Host pathRewrite: &#123; &#x27;^/api&#x27;: &#x27;&#x27; &#125;, // 重写路径 onProxyReq: (proxyReq, req, res) =&gt; &#123; res.setHeader(&#x27;Access-Control-Allow-Origin&#x27;, &#x27;*&#x27;); // 处理CORS &#125;&#125;));app.listen(3000, () =&gt; &#123; console.log(&#x27;Proxy server is running on http://localhost:3000&#x27;);&#125;); 优点： 适合前端开发者，方便集成到 Node.js 项目中。 易于修改和扩展。 缺点： 性能较 Nginx 稍弱，不建议直接用于高并发生产环境。 3. 使用 Webpack Dev Server 内置代理在前端项目开发阶段，webpack-dev-server 提供内置的反向代理功能，非常适合用于本地开发调试。 配置示例： 在 webpack.config.js 中添加如下配置： 1234567891011module.exports = &#123; devServer: &#123; proxy: &#123; &#x27;/api&#x27;: &#123; target: &#x27;http://backend-service:8080&#x27;, // 后端服务地址 changeOrigin: true, // 修改 Host 头 pathRewrite: &#123; &#x27;^/api&#x27;: &#x27;&#x27; &#125;, // 重写路径 &#125;, &#125;, &#125;,&#125;; 优点： 开箱即用，专为前端开发环境设计。 配置简单，不需要额外安装其他服务。 缺点： 仅适用于开发环境，不能用于生产。 4. 使用 Vite 代理（适合 Vue、React 等）Vite 是一种快速构建工具，也提供内置的代理功能。 配置示例： 在 vite.config.js 中配置代理： 1234567891011export default &#123; server: &#123; proxy: &#123; &#x27;/api&#x27;: &#123; target: &#x27;http://backend-service:8080&#x27;, changeOrigin: true, rewrite: path =&gt; path.replace(/^\\/api/, &#x27;&#x27;), // 重写路径 &#125;, &#125;, &#125;,&#125;; 优点： 适用于现代前端开发框架（如 Vue、React）。 内置开发服务器集成，配置简单。 缺点： 仅用于开发环境。 5. 使用 Apache 反向代理类似于 Nginx，Apache 也是一种常用的 Web 服务器，并支持反向代理。 配置示例： 123456789101112131415&lt;VirtualHost *:80&gt; ServerName localhost ProxyRequests Off &lt;Proxy *&gt; Order deny,allow Allow from all &lt;/Proxy&gt; ProxyPass /api/ http://backend-service:8080/ ProxyPassReverse /api/ http://backend-service:8080/ Header set Access-Control-Allow-Origin &quot;*&quot; Header set Access-Control-Allow-Methods &quot;GET,POST,OPTIONS&quot;&lt;/VirtualHost&gt; 优点： 稳定且功能丰富，适合生产环境。 支持大量模块，可实现复杂的需求。 缺点： 相比 Nginx 配置略复杂。 总结不同反向代理方式的适用场景如下： 方式 适用场景 优缺点 Nginx 生产环境 性能优异，配置灵活 Express(Node.js) 开发/测试环境 适合前端项目开发 Webpack Dev Server 前端开发环境 易配置，快速上手 Vite 前端开发环境 快速开发 Apache 生产环境 稳定，但配置较复杂 根据你的项目需求和开发环境，可以选择合适的反向代理方式。如果是前端开发阶段，webpack-dev-server 或 Vite 是首选。如果是生产环境，更推荐 Nginx 或 Apache。","categories":[{"name":"未分类","slug":"未分类","permalink":"https://www.laoliang.ink/categories/%E6%9C%AA%E5%88%86%E7%B1%BB/"}],"tags":[{"name":"无标签","slug":"无标签","permalink":"https://www.laoliang.ink/tags/%E6%97%A0%E6%A0%87%E7%AD%BE/"}]},{"title":"软件测试的分类","slug":"软件测试的分类","date":"2019-04-08T09:58:29.000Z","updated":"2024-11-16T11:26:50.322Z","comments":true,"path":"posts/20190408175829/","link":"","permalink":"https://www.laoliang.ink/posts/20190408175829/","excerpt":"","text":"按测试阶段分类单元测试 对软件中最小可充实单元进行检查和验证 单元测试的原则 尽可能保证各个测试用例是相互独立的 一般由代码的开发人员来实施，用以检验所开发的代码功能符合自己的设计要求 单元测试的益处 能尽早发现缺陷 有利于重构 简化集成 单元测试一定程度替代文档 用于设计，单元测试体验设计思路，设计本身可以用来验证设计 单元测试的限制 不可能覆盖所有的执行路径，所以不可能保证捕捉到所有路径的错误 每一行代码，一般需要 3-5 行测试代码才能完成单元测试，所以存在投入和产出的一个平衡 单元测试框架 JUnit NUnit PHPUnit CppUnit 集成测试 是在单元测试的基础上，测试在将所有的软件单元按照概要设计规格说明的要求组装成模块、子系统或系统的过程中各部分工作是否达到或实现相应技术指标及要求的活动 集成测试的主要实施方案 Big Bang 所有的东西都组装好，然后在进行测试 自顶向下 递增组装软件结构的方法，一般来说从主程序开始，沿控制层逐层向下来集成 自底向上 最常用的集成方法，从程序模块最底层的模块开始，逐层向上组装，并逐层的测试；好处是，针对我们已经集成的测试，不需要再针对上一层编写装模块 核心系统集成 先把核心的部分挑选出来，并对这些部分进行集成测试，在测试通过的基础上，在向外围拓展进行测试 高频集成 同步软件开发过程，每过一段时间，就对软件进行集成测试，常说的持续集成 系统测试 是将经过集成测试的软件，作为计算机系统的一个部分，与系统中其他部分结合起来，在实际运行环境下对计算机系统进行的一系列严格有效的测试，已发现软件潜在的问题，保证系统正常运行 关注点 关注系统本身的使用 关注系统与其他相关系统间的连通 关注系统在不同使用压力下的表现 关注系统在真实使用环境下的表现 验收测试 也称交付测试，针对用户需求、业务流程的正式的测试，确定系统是否满足验收标准，由用户、客户或其他授权机构决定是否接受系统 细分 用户验收测试 - 一般由开发方交付前自己做的测试 运行验收测试 - 从运维层面看系统是否能够正常运行，比如系统上线后备份、容灾 合同和规范验收测试 alpha 测试 - 开发者提供的环境进行的测试，一般由用户来执行 beta 测试 - 完全脱离开发环境，由用户提供的环境进行测试 按测试手段分类 黑盒测试、白盒测试 静态测试、动态测试 手工测试、自动化测试 黑盒测试 着眼于外部结构，不考虑内部逻辑，一般针对于软件外部的界面、可见的功能来测试，一般是从用户的视角通过不同的数据和事件来驱动系统，通过输出结果来进行判断 优点 容易实施，不需要关注内部的实现 更贴近用户的使用角度 缺点 测试覆盖率比较低，一般只能覆盖到代码量的不到 40% 针对黑盒的自动化测试，复用率较低，维护成本较高 黑盒测试主要测试什么 主要（更多）应用于 系统测试 阶段 是否有不正确或遗漏的功能 在接口上，输入是否能正确的接受，能否输出正确的结果 是否有数据结构错误或外部信息（例如数据文件）访问错误 性能上是否能够满足要求 黑盒测试的主要设计方法 等价类划分法 边界值分析法 错误推测法 因果图法 正交实验分析法 状态迁移图法 流程分析法 白盒测试 测试人员对内部结构是非常了解的，又称为结构化测试或透明盒测试； 白盒测试是通过程序的逻辑结构设计测试用例，用逻辑的覆盖率来衡量测试的完整性 主要的逻辑单位 语句 条件 条件组合 分支 路径 优点 迫使测试人员去仔细思考软件的实现，理解原理 可以检测到代码中的每条分支和路径 可以揭示隐藏在代码中的错误 对代码的测试比较彻底 缺点 昂贵 - 因为要做到较高的覆盖率，所以成本高 无法检测代码中遗漏的路径和数据敏感性错误 不能直接验证需求的正确性 白盒测试的主要测试方法 代码检测法 静态结构分析法 静态质量度量法 逻辑覆盖法 基本路径测试法 灰盒测试 介于黑、白盒测试之间的，关注输出对于输入的正确性，同时也关注内部表现 静态测试 静态测试是指 无需执行 被测程序，而是通过评审软件文档或代码，度量程序，度量程序静态复杂度，检查软件是否符合编程标准，借以发现编写的程序的不足之处，减少错误出现的概率 特点就是，程序是不被运行的，直接看我们的文档或者代码，可以人工也可以通过自动化工具来做，通过静态的检查代码或者文档的测试手段 测试方式 互审 - 程序员相互检查相互的代码 走查 - 一个小组集体走查程序或文档 会议 - 召开会议 动态测试 是指通过运行被测程序，检查运行结果与预期结果的差异，并分析运行效率、正确性和健壮性等 手工测试 由专门的测试人员从用户视角来验证软件是否满足设计要求的行为。更适用针对深度的测试和强调主观判断的测试 常见的：众包测试、探索式测试，都是用手工测试完成的 优点 容易发现缺陷 容易实施 创造性、灵活性 缺点 覆盖量化难 重复测试效率低 不一致性、可靠性低 人力资源依赖 自动化测试 使用单独的测试工具软件控制测试的自动化执行以及对于其和结果进行自动检查 常见的：单元测试、接口测试、性能测试等，都是用自动化测试完成的 优点 高效率、速度快 高复用性 覆盖率容易度量 准确、可靠 不知疲劳 缺点 机械、发现缺陷率低 一次性投入较大 按测试模式分类传统的瀑布模型 最早出现的软件开发模型，每一个阶段都是按顺序的向下，到下一个阶段，就像瀑布下落一样 瀑布模型每一个阶段都是以上一个阶段的输出作为下一个阶段的输入 项目计划 ——&gt; 需求分析 ——&gt; 软件设计 ——&gt; 程序开发 ——&gt; 软件测试 ——&gt; 集成维护 优点 强调需求、设计的作用 前一阶段完成后，只需要关注后续阶段 为项目提供了按阶段划分的检查点，里程碑清晰 文档规范 缺点 难以适应需求的频繁变化 项目周期后段才能看到成果 强制的里程碑、完成时间点 文档工作量大 V 模型 需求分析 ——&gt; 概要设计 ——&gt; 详细设计 ——&gt; 软件编码 -&gt; 验收测试 &lt;—— 系统测试 &lt;—— 集成测试 &lt;—— 单元测试 &lt;- 是瀑布模型的变种，是目前使用最广泛的一种模型，在 V 模型中，明确表明了测试过程的不同级别或者不同阶段，并且描述了这些阶段和开发过程各个阶段的对应关系 局限性是：仅仅把测试过程作为需求分析和编码之后的阶段，所以对于需求分析的测试只有到最后的验收测试才会发现问题 W 模型 也称为 双 V 模型，是对 V 模型的改进模型 增加了软件开发各个阶段同步进行验证和确认的活动，测试时伴随整个开发周期进行，测试的对象也不仅仅是程序，他要对需求和设计都要进行相应的测试，开发和测试是两个并行的流程 W 模型 有利于及时了解项目的测试风险，及早确定应对方案 W 模型 也有其局限性，该模型中，需求、编码、测试仍然是串行的，测试和开发保持着一个线性的关系，只有在上一阶段完成之后才能进入下一阶段 X 模型 针对 V 模型 提出的改进 主要解决交接和频繁集成的周期的问题 敏捷测试 Agile Testing —— 遵循 敏捷宣言 的一种测试实践 敏捷宣言： 个体与交互 重于 过程和工具 可用的软件 重于 完备的文档 客户合作 重于 合同谈判 响应变化 重于 遵循计划 在以上每对比较中，后者并非完全无价值，但我们更看重前者 敏捷测试的特点 强调从客户角度进行测试 重点关注迭代测试新功能，不再强调测试阶段 尽早测试，不间断的测试，具备条件即测试 强调持续反馈 预防缺陷重于发现缺陷 敏捷测试 VS 传统测试 传统测试 敏捷测试 - 测试时质量的最后保护者 - 开发和测试人员是紧密合作，大家都有责任对软件负责 - 严格的变更管理 - 变更是可接受的，拥抱变更 - 预先的计划和细节的准备 - 计划随着进展时常调整 - 重量级文档 - 只需要绝对必要的文档 - 各阶段测试严格的入口和出口标准 - 各迭代之间已经没有明显的入口和出口标准 - 更多在回归测试是进行重量级的自动化测试 - 所有阶段都需要自动测试，每个人都需要做，是项目集成的一部分 - 严格依赖流程执行 - 流程不再需要严格执行 - 测试团队和开发团队是相对独立的 - 团队合作是无缝隙合作的 基于脚本的测试 Script-based Testing Scripted Testing (ST) Exploratory Testing (ET) 基于风险的测试 - RBT Risk-based Testing 一种基于对软件失效的风险评估并以此指导测试计划、设计、执行、结果评价的软件测试类型 哪些是风险？ 质量风险 管理风险 风险级别 = 风险可能性 x 风险严重度 识别风险 风险要素分 = Sum（单项权重 * 得分） 可能性 复杂性 时间压力 高变更率 技能水平 地理分散度 严重程度 使用频率 失效可视性 商业损失 组织负面影响和损害 社会损失和法律责任 基于探索式的测试 - ST 完全抛开测试脚本的测试 它是一种测试风格、思维，而不是一种测试技术 ET 和 ST 使用 Pure Scripted Vague Scripted Fragmentary test cases Charters Roles Freestyle ET ST vs ET ST ET - 系统性强 - 自由灵活 - 容易管理、控制 - 和 ST 是互补的 - 设计在先，执行在后 - 执行和设计（思考）并行 - 主要是验证自己的思路 - 不断和系统交互，带着问题测试 - 可预见性 - 学习的过程 探索式测试的优点 更能激发测试人员的创造性和工作乐趣 增加了发现新的或者较深入 Bug 的可能性 可以在较短时间内找到更多 Bug 以及对 SUT 做出一个快速的评估 有利于更加有效地实施自动化 更加适用于敏捷项目 减少了再简单、繁复上用例的无谓编写时间 探索式测试的缺点 测试管理上有局限性，较难协调和控制 对于 Bug 的重复利用和重现上作用有限 对测试人员的测试技能和业务知识深度依赖较大 只有在 SUT 已完全可用的前提下才更有作用 ET 的生产率很难定义 ET 本身较难进行自动化 执行探索式测试 Know You Mession Learning Session Coverage Session Deep Session Close Session 基于模型的测试 - MBT Model-based testing is software testing in which test cases are derived in whole or in part from a model that describes some (usually functional) aspects of the system under test (SUT). 按测试类型分类功能测试 根据产品特性、操作描述和用户反感，测试一个产品的特性和可操作性为已确定他们满足设计需求 针对的问题 功能错误或遗漏 界面问题 性能错误 数据及访问错误 初始化及终止错误 功能测试工具 QTP winrunner silkTest Rational robot selenium Watir Sikuli 性能测试 衍生出： 负载测试 压力测试 稳定性测试 性能指标 并发用户数 VU 每秒事务数 TPS 系统响应时间 设备性能 性能测试工具 LoadRunner Silkperformer Jmeter WebLoad Apache Bench LoadUI 静态性能评估 开发 Web 应用时，基于一系列 Web 应用页面性能优化的最佳实践对 Web 应用的页面进行静态分析，并给出评估结果的性能分析方法 YSlow - 雅虎 PageSpeed - 谷歌 应用性能管理（APM） Application performance Management，提供对系统的实时监控以实现性能管理、故障管理的解决方案 国内产品举例：听云 安全测试 对软件产品进行测试以确保其符合 产品安全需求 和 质量标准 通常相提并论提到的测试：渗透测试 通过模拟对软件系统的恶意攻击行为来评估系统安全性的一种测试 渗透测试 VS 安全测试 渗透测试 安全测试 攻 防 点 面 易 难 OWASP Open Web Application Security Project OWASP Top 10 Test Guide 安全测试工具 Appscan Webinspect Nessus Nmap MetaSploit WebScarab Fortify W3AF 兼容性测试 软件本身的兼容性 - 向后兼容 不同平台下的兼容性 - 运行在多个平台 软件对运行设备的兼容性 - 32位、64位、手机、电视盒子 软件互操作性 - 软件之间的联动 浏览器内核 Trident 4 - 6 —— IE 6 - 8 ，9，10 Gecko —— FireFox WebKit —— Safari、Chrome presto —— Opera 浏览器兼容性测试工具 BrowserShots Browser Sandbox Google 浏览器兼容测试插件 文档测试 针对软件产品的交付品，配套的文档类部件的测试 如：用户手册、使用说明、用户帮助文档等 文档测试关注要点 完整性 正确性 一致性 易理解性 易浏览性 可靠性测试 软件可靠性 硬件可靠性 易用性测试 易用性测试是指测试用户使用软件时是否感觉方便，能否保证用户使用体验的测试类型 一般针对：用户界面、用户交互、网站布局 本地化测试 针对软件的本地化版本实施的针对性测试 主要测试内容 语言、书写习惯 时区、日期格式、货币 当地风俗、法律法规 政治敏感内容 部署测试 也称为安装测试，主要验证系统部署过程，并确保软件经过安装测试后可以正常使用 主要测试内容 在不同环境下的部署验证 参照部署文档执行，过程的合理、正确性 基础数据 无障碍测试 Accessibility Test 也称为访问性测试 是指软件需要提供便于特殊人群使用的功能，包括视障、听障、老年人、身体残疾用户等，无障碍测试则是针对这部分功能的测试 其他的一些测试类型概念回归测试 软件功能修改后，对软件进行重新测试以确认修改没有引入新的错误或导致其他部分产生错误 回归测试的重心在 关键模块 和 重点功能 组件 软件研发周期中会进行多次回归测试，且尽量实现自动化 Monkey 测试 Monkey 测试，也称搞怪测试 就是用一些随机、稀奇古怪的方式来操作软件，以测试系统的健壮性和稳定性 冒烟测试 来自于硬件板卡验证术语 软件上则用于确认代码中的更改会按照预期运行，且不会破坏整个版本的稳定性 “每日构建”中用冒烟测试来确认合入的代码没有影响主要功能的正常 A/B 测试 多用于互联网行业，通过为页面提供 2个版本给用户使用并记录相关的用户行为数据，来确定优化设计的一种测试方案 A/B 测试实施要点 多个方案并行 每次测试仅改动一个变量 按照某种规则进行优胜劣汰 A/B 测试工具 Google Analytics Content Experiments Visual Website Optimizer","categories":[{"name":"未分类","slug":"未分类","permalink":"https://www.laoliang.ink/categories/%E6%9C%AA%E5%88%86%E7%B1%BB/"}],"tags":[{"name":"无标签","slug":"无标签","permalink":"https://www.laoliang.ink/tags/%E6%97%A0%E6%A0%87%E7%AD%BE/"}]},{"title":"Java面试-基础知识笔记","slug":"Java-面试-基础知识笔记","date":"2019-03-11T05:34:21.000Z","updated":"2024-11-16T11:26:50.321Z","comments":true,"path":"posts/20190311133421/","link":"","permalink":"https://www.laoliang.ink/posts/20190311133421/","excerpt":"","text":"Synchronized （Java 关键字） 作用： 能够保证在同一时刻最多只有一个线程执行该段代码，以达到保证并发安全的效果。 两个用法对象锁 方法锁：默认锁对象为 this 当前实例对象 同步代码块锁：自己指定锁对象 类锁 synchronized 修饰 静态 的方法 synchronized 指定锁为Class对象 多线程访问同步方法的 7 种情况（面试常考） 两个线程同时访问 一个对象 的同步方法 两个线程访问的是 两个对象 的同步方法 两个线程访问的是 synchronized 的 静态 方法 同时访问 同步 方法与 非同步 方法 访问同一个对象的 不同的 普通同步方法 同时访问 静态 synchronized 和 非静态 synchronized 方法 方法 抛异常 后，会 释放锁 7 种情况总结：3 点核心思想 一个锁只能同时被一个线程获取，没有拿到锁的线程必须等待（对应 1、 5 中情况）； 每个实例都对应有自己的一把锁，不同实例之间互不影响；例外：锁对象是 *.class 以及 synchronized 修饰的是 static 方式的时候，所有对象共用一把 类锁 （对应 2、 3、 4、 6 种情况）； 无论是方法正常执行完毕或者方法抛出异常，虚拟机都会帮助我们自动释放锁（对应第 7 种情况） Synchronized 缺陷 对比 Lock 接口、读写锁等 效率低：锁的释放情况少、试图获得锁时不能设定超时、不能中断一个正在试图获得锁的线程 不够灵活（读写锁更灵活）：加锁和释放的时机单一，每个锁仅有单一的条件（某个对象），可能是不够的 无法知道是否成功获取到锁 Synchronized 常见面试问题 使用注意点： 锁对象不能为空 作用域不宜过大，提高效率 避免死锁，比如遇到 A 持锁1要 锁2 的同时 B 持锁2 要锁1 如何选择 Lock 和 Synchronized 关键字？ 有现成的工具包，就用现成的 非要用，优先选用 Synchronized ，减少代码量 RedisRedis 在 Java Web 中的主要应用场景 存储 缓存 用的数据 需要高速读/写的场合 使用它快速读/写 数量控制器 消息队列 消息队列的概念与应用应用场景 冗余：比如数据排队处理并持久化后，删除原数据 解耦：分离两套系统 流量消峰：秒杀抢购 异步通信：队列使请求直接返回，后面慢慢处理 扩展性： 排序保证： 队列介质 MySQL：可靠性高、易于实现、速度慢 Redis：速度快，单条大消息包时候效率低 消息系统（RabbitMQ等）：专业性强、可靠、学习成本高 消息处理触发机制 死循环方式读取：易实现，故障时无法及时恢复 定时任务：压力均分，有处理量上限 守护进程：类似于 PHP-FPM 和 PHP-GG，需要 Shell 基础 数据库设计ER 图例说明 矩形：表示实体集，矩形内写实体集的名字 菱形：表示联系集 椭圆：表示实体的属性 线段：将属性连接到实体集，或将实体集连接到联系集 设计范式 第一范式 定义： 数据库表中的所有字段都是单一属性，不可再分，这个单一属性是由基本的数据类型所构成的 换句话说 ，第一范式要求数据库中的表都是二维表 第二范式 定义： 数据库的表中不存在非关键字段对任一候选关键字段的部分函数依赖 部分函数依赖 是指存在着组合关键字中的某一关键字决定非关键字的情况 换句话说： 所有单关键字段的表都符合第二范式 第三范式 第三范式是在第二范式的基础之上定义的， 如果数据表中不存在非关键字段， 对任意候选关键字段的传递函数依赖， 则符合第三范式 BC 范式（Boyce.Codd 范式） 定义： 在第三范式的基础之上，数据库表中如果不存在任何字段对任一候选关键字段的传递函数依赖，则符合 BC 范式 也就是说，如果是复合关键字，则复合关键字之间也不能存在函数依赖关系 物理设计 选择合适的数据管理系统（Orale、MySQL、PgSQL） 定义数据库、表及字段的命名规范 根据所选的 DBMS 系统选择合适的字段类型（char、vachar） 反范式化设计（如：出于读写效率考量，增加数据冗余） MySQL 常见的存储引擎 存储引擎 事务 锁粒度 主要应用 忌用 MyISAM 不支持 支持并发插入的表级锁 select，insert 读写操作频繁 MRG_MyISAM 不支持 支持并发插入的表级锁 分段归档，数据仓库 全局查找过多的场景 Innodb 支持 支持 MVCC 的行级锁 事务处理 无 Archive 不支持 行级锁 日志记录，只支持insert，select 需要随机读取，更新，删除 Ndb cluster 支持 行级锁 高可用性 大部分应用 操作系统进程与线程区别与联系 进程是系统资源分配的最小单位 线程是程序执行的最小单位 进程使用独立的数据空间 线程共享同一线程的数据空间 线程调度 时间片轮转调度 先来先服务调度 优先级调度 多级反馈队列调度 高响应比优先调度 网络知识TCP协议 建立连接：三次握手 管理连接：四次挥手 报文状态标志与连接状态 Nagel 算法与 ACK 延迟 KeepALive - 是在长时间没有数据发送的情况下保持连接可用的机制，需要了解开启和设置方式 滑动窗口与流量控制 HTTP 协议协议 Method Header Cookies UrlEncode状态码HTTPSHTTP2 多路复用 Stream 流量控制 服务端推送 头部压缩 UDP 非连接 非可靠传输 效率高 QUIC 避免前序包阻塞（HOL阻塞） 零 RTT 建连 FEC 前向纠错 OSI 模型 应用层 表示层 会话层 传输层 网络层 数据链路层 物理层 （物联网输会示用） TCP/IP 模型1. 应用层 对应 OSI 的应用层、表示层、会话层 Telnet 协议能提供远程登录服务 FTP（File Transfer Protocol）文件传输协议 SMTP（Simple Mail Transaction Protocol）简单邮件传输协议 SNMP（Simple Network Management Protocol）简单网络管理协议 HTTP（HyperText Transfer Protocol）超文本传输协议 RPC（Remote Procedure Call）远程过程调用 2. 传输层 TCP（Transmission Control Protocol）传输控制协议 UDP（User Datagram Protocol）用户数据包协议 QUIC（Quick UDP Internet Connection）快速 UDP 网络连接 - 基于 UDP 实现原 HTTP 功能，现已被标准化为 HTTP3 协议 3. 网络层 IP（Internet Protocol）网络协议 ICMP（Internet Control Message Protocol）网络控制信息协议 IGMP（Internet Group Management Protocol）网络组群管理协议 4. 网络接口层 对应 OSI 的数据链路层、物理层 ARP（Address Resolution Protocol）地址解析协议 RARP（Reverse Address Resolution Protocol）反向地址转换协议 设计模式创建型工厂方法模式（常用） 在实际业务中经常用到，也是面试的主要考察点，是创建不同类型实例常用的方式 spring 中的 bean 都是有不同工厂类创建的 抽象工程模式单例模式（常用） 线程安全实现的常用三种方法 静态初始化（饿汉），不管是否使用都会创建 双检锁（懒汉），单例变量必须要用 volatile 修饰 单例注册表，spring 中 bean 的单例模式就是用该方法实现 建造者模式 适用于一个对象拥有很多复杂的属性，需要根据不同情况创建不同的具体对象 创建 Protocol Buffer 对象时，需要用到 Builder 原型模式结构型适配器模式（常用） 类似于转接头，将两种不匹配的对象进行适配，也可以起到对两个不同的对象进行解耦的作用 SLF4J 可使项目 Log4、Logback 等具体日志实现框架进行解耦，其通过不同适配器与不同框架进行适配，完成日志功能的使用 装饰器模式代理模式（常用） 在不适合或不能直接引用另一个对象的场景，可以用代理模式对被代理的队形进行访问行为的控制，Java的代理模式分为静态代理和动态代理，静态代理是指在编译时就创建好的代理类，例如在源代码中编写的类，动态代理指在 JVM 运行过程中动态创建的代理类， 如 JDK 动态代理，CDLIB，Javaasist 等 例如：在 MyBatis 中 getMapper 时会通知 MapperProxyFactory 及配置文件动态生成的 Mapper 代理对象，代理对象会拦截 Mapper 接口的方法调用，创建对应方法的 MapperMethod 类并执行 execute 方法，然后返回结果 外观模式桥接模式组合模式享元模式行为型策略模式模板方法模式观察者模式（常用） 也可称为发布订阅模式，适用于一个对象某个行为需要出发一系列操作的场景 GRPC 中 Stream 流式请求的处理 迭代器模式责任链模式（常用） 类似工厂流水线，其中的每个节点完成对对象的某一种处理 Netty 框架的处理消息的 Pipeline 就是采用的责任链模式 命令模式备忘录模式状态模式访问者模式中介者模式解释器模式Java 语言Java 语言特性集合类 主要掌握如何实现 动态代理与反射 是 Java 语言的特色，需要掌握动态代理与反射的使用场景 ORM 框架中会大量使用代理类，RPC 调用时使用反射机制调用实现类的方法 数据类型 也是面试的常见问题，如每种数据类型占用多大空间，数据类型的自动转换与强制转换，基础数据类型与 Wrapper 数据类型的自动装箱与拆箱等 对象引用 （可自行搜索） Java基础常考点 - MapHashMap 通过数组加链表实现 数组中的元素为一个链表，通过计算存入对象的 hashcode，确认存入位置，用链表解决散列冲突，链表的节点存入的是键值对 填充因子的作用 Map 扩容的 rehash 机制 容量是二的幂次方 是为了方便按位与操作计算余数，比求模更快 多线程风险的原因 对线程 put 时，会在超过填充因子的情况下 rehash.HashMap 为避免尾部遍历，链表插入采用头插法，多线程场景下可能产生死循环 ConcurrentHashMap 分段锁思想 1.7 中采用 segment 分段加锁，降低并发锁定程度 CAS 自旋锁 1.8 中采用 CAS 自旋锁（一种乐观锁实现模式）提高性能，但在并发度较高时，性能一般 红黑树 1.8 引入红黑树解决 hash 冲突时的链表查找问题，在链表长度大于 8 且总容量大于 64 时启用，扩容后链表长度小于 6 时重新转为一般链表（8,6,64为默认参数） Java 版本特性1.8 Lambda 表达式 StreamAPI 方法引用 接口默认方法 Metaspace 替换 PremGen 1.9 - 1.10 模块系统 默认 G1 回收器 接口私有方法 局部变量判断 Graal 编译器 1.11 ZGC 字符串 API 增强 内建 HTTP Client 面试考察点基本概念和基本原理 理解正确清晰 网络协议 4/7 层模型的概念 TCP 协议流量控制的实现原理 …… 实现方法和使用方法 HashMap 在 JDK 1.8 中的实现方式 单例模式有哪几种实现方式，什么场景该使用静态方法实现，什么场景该使用双检锁实现 …… 经常用到的知识点 常用的 Linux 命令有哪些，用来解决什么样的问题 …… 实际应用中容易犯错的点 == 与 equals 区别是什么 对象强引用使用不当会导致内存泄露，考察不同引用方式和作用的理解 …… 与面试方向相关的知识点 中间件、存储、网络相关的考察 …… 加分项 知识点与典型的业务场景关联 如：谈到设计模式时，可以讲 XX 框架在解决 XX 问题时使用了那种设计模式 以反例来描述实际场景中误用的危害 如：大量使用反射会影响性能 与知识点相关的优化点 如：讲到 TCP 建连和断连时，如遇到洪水攻击或大量 TIME_WAIT 时，可以调整系统参数预防 与知识点相关的最新技术趋势 如：讲到 ConcurrentHashMap，可以介绍 1.8 的改进细节 或：讲到 HTTP 时，能说出 HTTP2 和 QUIC 的特点和实现 在了解的前提下，尽量增加回答内容的深度 如：讲到 TCP 的滑动窗口时，能讲到流量与拥塞控制，进一步能指出解决拥塞的不同算法 真题汇总1. 进程和线程的区别和联系 从资源占用，切换效率，通信方式等方面回答 2. 简单介绍一下进程的切换过程 线程上下文的切换代价，要回答，切换会保存寄存器、栈等线程相关的现场，需要由用户态切换到内核态，可以用 vmstat 命令查看线程上下文的切换情况 3. 你经常使用哪些 Linux 命令，主要用来解决哪些问题4. 为什么 TCP 建连需要 3 次握手，而断连需要 4 次5. 为什么 TCP 关闭连接时需要 TIME_WAIT 状态，为什么要等 2MSL6. 一次完整的 HTTP 请求过程是怎样的 DNS 解析，TCP 建连，HTTP 请求，HTTP 响应等 7. HTTP2 和 HTTP 的区别有哪些8. 在你的项目中你使用过哪些设计模式，主要用来解决哪些问题9. Object 中的 equals 和 hashcode 的作用分别是什么10. final， finally， finalize 的区别于使用场景11. 简单表述一下 Java 的异常机制12. 线上使用的哪个版本 JDK， 为什么使用这个版本（有什么特色）","categories":[{"name":"未分类","slug":"未分类","permalink":"https://www.laoliang.ink/categories/%E6%9C%AA%E5%88%86%E7%B1%BB/"}],"tags":[{"name":"无标签","slug":"无标签","permalink":"https://www.laoliang.ink/tags/%E6%97%A0%E6%A0%87%E7%AD%BE/"}]},{"title":"年轻人何以成为“隐形贫困人口”？","slug":"年轻人何以成为“隐形贫困人口”？","date":"2018-05-03T08:17:55.000Z","updated":"2024-11-16T11:26:50.316Z","comments":true,"path":"posts/20180503161755/","link":"","permalink":"https://www.laoliang.ink/posts/20180503161755/","excerpt":"","text":"长的是磨难，短的是人生，在惘惘莫名的威胁感下，“人们受不了这个，急于攀住一点踏实的东西”，于是“从柴米油盐、肥皂、水与太阳之中去找寻实际的人生” “佛系青年”还言犹在耳，同龄人“抛弃”你也没过多久，“隐形贫困人口”这个词火了。根据网络定义，隐形贫困人口是指“那些看起来每天有吃有喝，但实际上非常穷的人”。 “能买戴森吸尘器就不用扫帚了；吃完牛油果又要吃藜麦了；100块钱一张的‘前男友面膜’用起来也不心疼；一有健身冲动，就非得去办张年卡。总之，朋友圈光鲜靓丽，口袋空空如也，‘吃土’是常态，在精致道路上拿出十八般武艺、拼尽全力。”在“隐形贫困人口”的相关评析文章中，“隐形贫困人口”被认定是“自我消费不节制所造成的”，正是因为想过得富一点，所以把日过得穷了。甚至有人认为，“隐形贫困人口”与之前流行的“月光族”“啃老族”没有太大区别。 不过将年轻人的“贫困”归咎于消费主义和消费的不节制，是否会遮蔽了一些什么？比如许多年轻人“非常穷”，倒不是因为他们将钱花费在吃好喝好上了，而是因为他们真的穷。即便有年轻人将大部分的金钱花在吃好喝好上，仅仅是因为他们热衷消费，还是背后有什么更深层次的原因？比如究竟是热衷消费导致了贫困，还是因为贫困所以热衷消费？ 总之，一个热词背后往往蕴藏着重要的社会心理信息，“隐形贫困人口”的理论景深值得细究。 大众传媒时代的“贫困感”身边一位50后的长辈学者，对现在年轻人老是说自己“贫困”“丧”很是不屑。在他看来，物质生活好了，年轻人都是蜜罐中长大，身在福中不知福，还养了一身矫情的本领。他说，他们那一辈人的成长岁月里，物质短缺、缺衣少食，饥饿是家常便饭，现在年轻人所能享受到的丰富和便捷的物质生活，是他们那个时代的人从来都不敢想的事。怎么现在的80后、90后、00后，动不动就觉得自己那一代人是“最不幸的”？ 长辈的质疑，纵然有代际隔阂的因素，却也提出了一个重要的问题，即怎么物质生活越来越好，自称“贫困”的人却越来越多了？这与其说是这一代年轻人矫情，毋宁说，老一辈与年轻人对于“贫困”的认定和感知是不一样的。在老一辈那里，贫困更多意味着最基本的生存需求无法满足，但在新一代年轻人这里，不贫困不仅仅意味着有吃有喝，还意味着吃好喝好，甚至更多。那么，年轻人的贫困阈值，是如何不断提高的？ 这里不得不着重强调的是，高度发达的大众传媒对年轻人观念的影响。我们已经进入了一个大众传媒时代，传媒榫入日常生活的方方面面，并不断塑造着人们的认知。文化学者南帆指出，“现代社会的标志是我们被抛入了大众传媒组织起来的社会，大众传媒就是我们的文化感官。几张报纸、几个电视频道或者几个网站就布置出了一个大千世界的幻象。”而这个幻象的核心是，种种幸福生活的神话。阿兰·德波顿在《身份的焦虑》一书中写道，“报刊和社会舆论没完没了的鼓噪，让每个生活在底层的人都相信他们总有机会攀上社会金字塔的塔尖，有机会成为实业家、大法官、科学家，甚至是总统。这种无限机遇的论调在一开始也许能给人一种盲目的乐观，对那些底层的年轻人尤甚。” ▲ “受众劳动”，英文Audience Labour，由Smythe在1977年提出，他认为在闲暇时间收看电视、阅读报纸的“受众”实际是为广告商工作，是广告支持下的传播业所生产的一种特殊商品。传统的马克思主义研究没有对传播体系的经济作用给予足够的关注，生产这种学习消费的受众是大众 我们每时每刻都在被成功人士的故事包围，哪个年轻人月薪5万，哪个年轻人创业成功一跃成为亿万富翁；即便是电视里的广告，不断宣扬的也是一种中产阶层的生活样本：一栋别墅，阳光照射进来，漂亮的妻子在做家务，小孩在快乐地玩耍…… 身边的幸福神话太多，其结果就是知名作家韩少功所说的，“每个人都可以找到足够根据，来发现自己的贫困”。跟胡玮炜相比，年薪30万的码农是贫困的；跟北京三环有一套房的人相比，三线城市有一套房的人是贫困的……“人们从现代文化工业那里获取了太多的感受能力及其知识装备，也从文化工业那里接受了太多有关人类幸福的神话，于是特别容易产生自我感觉的模拟演习，直至在心理上自伤”。 也即，许多年轻人自嘲“隐形贫困”，倒不见得他们是真的贫困，他们的“贫困感”有可能是来自于传媒时代的文本感染和广告后遗症，来自于与幸福神话的对照和攀比。“这个社会的传媒技术已经市场化或者权力化，受控于资本化的权力或者权力化的资本”（韩少功语），权力和资本媾和打造幸福神话，才能源源不断激发受众的“贫困感”，激发他们的消费冲动，并让他们心甘情愿成为消费的“顺民”。 从这个角度看，某些人自嘲“隐形贫困人口”，倒真有可能是一种矫情，是不断夸大的心理自伤。 不断壮大的“穷忙族”不过，时代不断进步的标志本来就是，人们对贫困标准的认定在不断提高。以前吃好喝好就是不贫困，但如果几十年过去了，人们的需求依旧停留在马斯洛需求层次的最低阶段，那么这绝对称不上一个好的时代。虽然攀比逻辑值得检讨，但比烂逻辑更是要不得。 应该看到，“隐形贫困人口”的自嘲，固然不乏大众传媒时代滋生的“贫困感”，但更多可能是出于一种贫困实感。这种贫困实感，或来自于生存和发展的需求得不到满足，或来自于安全、尊重以及自我实现的需求得不到满足。比如纵向对比，现在年轻人的物质生活的确比上世纪五六十年代好多了，但与当下时代的生活成本、发展前景等横向比较，这一代年轻人的处境就不见得比老一辈更好。 在“隐形贫困人口”这个词走红之前，另一个与贫困有关的词汇，就长久地成为不少年轻人对自我生存状态的概括，即“穷忙族”（working poor）。该词源于欧美国家，欧盟对其定义是“在工作却入不敷出，甚至沦落到贫穷线以下的受雇者”。按照常理，付出跟收入应该呈正相关，但如今越来越多的年轻人却是越穷越忙，越忙越穷；他们一直在努力工作，生活状态却不见根本性的改善。 ▲ NHK纪录片《穷忙族》。 © 知乎 2017年12月，中山大学社会科学调查中心发布《中国劳动力动态调查：2017年报告》显示，中国劳动力每周工作时间在50或50小时以上的分别为43.90%、42.57%，比例均超过四成。“996”（工作日早9点上班，晚上9点下班，中午和晚上休息1小时甚至更少，并且一周工作6天的工作制度）成为许多年轻人的工作常态，越是大的、节奏快的城市越是如此，他们在办公室的时间甚至比跟家人在一起的时间更多。曾有深受加班困扰的白领说，“如果不是大楼高层的窗户不能打开，很多人都可能已经跳下去了。” 但不少年轻人努力付出，他们却变得“越来越穷”，他们的收入增速远低于国民收入的增速。腾讯·今日话题在一篇文章中指出，对比应届毕业生平均薪资增速和居民人均可支配收入增速可发现，在2012-2015年，刚毕业大学生工资的整体增速赶不上社会平均水平。在很大程度上，毕业生就是年轻人的代表。不去考虑大学毕业生起薪低的问题，这个群体的工资增速没有和社会整体同步，年轻人存在“相对贫困”的问题，他们正成为“失落的阶层”。 除了工作强度大、工资低，更令年轻人困扰和焦虑的，还在于他们未来前景的“不稳定”，即便他们勤勤恳恳地工作，也随时可能有失业的风险。土逗公社在一篇文章中，讨论了Alex Foti在《“不稳定无产者”的一般性理论》（General Theory of thePrecariat）一书中提出的“不稳定的无产者”（Precariat）这一概念。Precariat来自于precarious（不稳定的）和proletariat（无产阶级）两个词的组合，它指涉的是处于不稳定雇佣关系中的无产者：低工资、缺乏劳动保护、没有社会保障、随时需要工作也随时可能被解雇；而90后、00后正在成为precariat中最重要的部分。 一边是“穷忙族”的生活和工作状态，一边是高不可攀的房价、高昂的生活成本、看不到预期的未来——许多年轻人何止是“隐形贫困人口”，他们是实实在在的贫困。 用消费来安慰苦难的人生矛盾的地方就在于，如果很多年轻人是真的贫困，可他们为何如此热衷于消费主义？不少社会学家都留意到这样一个现象，月收入不高的流水线年轻工人，所使用的手机常常是价格最为昂贵的iphone系列。究竟是消费导致他们沦为贫困，还是因为贫困所以他们更热衷于消费？ 按照文化学者王晓明先生的分析，今天的中国人“同时受制于三个社会系统”：“第一个是国家机器主导的政治系统，它以‘维稳’为宗旨，竭力加固那种‘除了适应现实，我们别无选择’普遍意识。第二个是中国特色的市场经济系统，它通过各种具体的成文和不成文法，持续训练人接受这样的自我定位，‘现代人，就是如下两面的结合：合乎市场需求的劳动力，和具有不可控制的消费冲动的消费者’。第三个日常生活系统，它安排人以‘居家’为中心，组织自己的大部分人生内容，从儿童时代接受学校教育开始，一直到老。这个系统持续地发展一种具有极宽的包含力的‘居家文化’，对人潜移默化，要将他造得除了‘居家’的舒适，别的什么都不在意。” ▲ 近年来，消费金额持续上涨，形成消费升级的浪潮。 © 国务院 埃里克·霍弗在《狂热分子》中也分析道，“当我们的生活朝不保夕，完全无力控制我们的生存环境时，就会执着于熟悉的生活方式。我们通过把生活模式固定化去对抗深深的不安全感。借此我们给自己制造了一种幻象：不可预测性已为我们所驯服。”也即，在艰难的生存现实面前，中国年轻人只能愈发投入于可预测、可掌控的消费与居家文化中，对日常生活系统的消费和呵护成为一种潮流。 这颇像张爱玲说的，长的是磨难，短的是人生，在惘惘莫名的威胁感下，“人们受不了这个，急于攀住一点踏实的东西”，于是“从柴米油盐、肥皂、水与太阳之中去找寻实际的人生”。年轻人买不起房子，却买得起一些让自己感受更好的居家用品，诚如学者严锋分析的，“人是渴望改变的，生活是很难改变的，生活中只有电子产品最容易改变，所以只能从电子产品的更新中获得一种虚幻的改变感，安慰苦难的人生。” 因此，不少对“隐形贫困人口”的批评颠倒了因果，并非“月光族”让年轻人贫困，而是因为贫困，年轻人只剩下哈维尔所说的那种“自由地选择哪一种牌子的冰箱和洗衣机”的自由了。 哈维尔深刻地指出，这种只热衷于消费主义的倾向会加剧公众的政治冷漠，贫困的状态将更难改变。“一个人越是彻底放弃任何全面转变的希望，放弃任何超越个人的目标和价值，或任何对一种‘外在’（即指公共事务，笔者注）方面发挥影响的机会，他的能量就转向阻力最小的方面，即‘内在’（指私人的物质生活，笔者注）。今天的人们一心一意地想着自己的家庭和房子，他们在那儿找到安息，忘掉世界的愚蠢……”“通过将每一个人的注意力集中在他仅仅是消费品的兴趣上，是希望使他没有能力意识到在他精神上、政治上、道德上日益增长的被侵犯的程度。将他缩减成一个初级消费品社会的各种观念的简单容器，是打算将他变成复杂操纵的顺从的材料。” 这或许才是“隐形贫困人口”背后的消费主义倾向值得我们高度警惕的地方。以消费安慰困难的人生，获取一点虚幻的改变感，是个人权利，也无可厚非；但我们切勿在权力和资本的鼓动下，全情投入到消费主义的怀抱中，尝到一点消费主义的甜头后，便心甘情愿地忍受贫困和剥削。要打破贫困，根本上应该打破“除了适应现实，我们别无选择”的政治意识，走出政治冷漠，积极参与每一次公共事务，积极维护个人的权益不受侵犯。 这很难，但想改变被剥夺和不公制造的贫困状态，就得从现在做起。 ——首发南都观察—— 版权归作者所有，任何形式转载请联系作者。作者：曾于里（来自豆瓣）来源：https://www.douban.com/note/667467299/","categories":[{"name":"未分类","slug":"未分类","permalink":"https://www.laoliang.ink/categories/%E6%9C%AA%E5%88%86%E7%B1%BB/"}],"tags":[{"name":"无标签","slug":"无标签","permalink":"https://www.laoliang.ink/tags/%E6%97%A0%E6%A0%87%E7%AD%BE/"}]},{"title":"多元思维模型","slug":"多元思维模型","date":"2017-10-23T10:45:59.000Z","updated":"2024-11-16T11:26:50.316Z","comments":true,"path":"posts/20171023184559/","link":"","permalink":"https://www.laoliang.ink/posts/20171023184559/","excerpt":"","text":"查理芒格认为，现实世界的种种问题，很少是正好落在某一个学科的界限里面的，而往往是横跨多个学科的。但是我们传统的教育又是以学科和专业划界来培养人才。你是哪个专业的，你就只了解这个专业的知识，对别的学科知识一窍不通。一个心理学专业的人，一般不会懂经济学，而一个经济学专业的人，一般也不会懂心理学。但是当你在现实世界中要解决问题的时候，就发现这种狭窄的知识结构很成问题。 多元思维模型帮助你正确进行【价值投资】我们可能只是简单地认为，价值投资就是不投机，做长线，找有成长性的股票长期持有。道理很多人都懂，但是做不到。为什么？因为你不具备巴菲特和芒格这样的多元知识结构。说白点，就是没有像他们那样懂那么多。所以，价值投资的精华不在于长期持有这样的一种理念，而是你用什么样的知识来挑选出哪家公司是值得长期持有的，这才是特别显功力的地方。 我们应该掌握什么样的【普世智慧】按照芒格的说法，首先我们并不需要了解所有的学科，我们只要了解最重要的那几个学科就可以了，比如 数学、物理学、化学、工程学、生物学、心理学、经济学、统计学 等；其次，对于每一个学科，我们也只需要了解它其中最基本的那几个模型就可以了。掌握了这些基本模型，实际上就掌握了这些学科最主要的智慧。这些基本模型大概有一百个左右，其中最重要的模型，有 数学中的复利原理，排列组合原理，物理学中的临界点、倾覆力矩，化学中的自我催化模型，生物学中的现代达尔文模型，工程学中的冗余备份模型， 还有 心理学中的认知误判模型 等。 这些模型就组成了芒格所说的“多元思维模型”。这些模型正是我们每个人都应该掌握的“普世价值”。 以上内容摘自：【采铜-好书精读】——《穷查理宝典》：三个核心思维方法，吸收巴菲特搭档的人生智慧","categories":[{"name":"未分类","slug":"未分类","permalink":"https://www.laoliang.ink/categories/%E6%9C%AA%E5%88%86%E7%B1%BB/"}],"tags":[{"name":"无标签","slug":"无标签","permalink":"https://www.laoliang.ink/tags/%E6%97%A0%E6%A0%87%E7%AD%BE/"}]},{"title":"SQL子查询总结：相关子查询与非相关子查询有什么区别","slug":"SQL子查询总结：相关子查询与非相关子查询有什么区别","date":"2016-11-26T02:31:27.000Z","updated":"2024-11-16T11:26:50.315Z","comments":true,"path":"posts/20161126103127/","link":"","permalink":"https://www.laoliang.ink/posts/20161126103127/","excerpt":"","text":"如果一个select语句能够返回单个值或者一列值，且该select语句嵌套在另一个SQL语句（例如select语句、insert语句、update语句或者delete语句）中，那么该select语句成为“子查询”（也叫内层查询），包含子查询的SQL语句称为“主查询”（也叫外层查询）。为了标记子查询与主查询之间的关系，通常将子查询写在小括号内。子查询一般用在主查询的where子句或having子句中，与比较运算符或者逻辑运算符一起构成where筛选条件或having筛选条件。子查询分为“相关子查询”（Dependent Subquery）与“非相关子查询”。 非相关子查询如果子查询返回单个值，则可以讲一个表达式的值与子查询的结果进行比较。例如，检索成绩比学生张三平均分高的所有学生及课程的信息， 可以使用下面的SQL语句， 执行结果如下图。 123456789mysql&gt; select class_name, student.student_no, student_name, course_name, score -&gt; from classes join student on student.class_no = classes.class_no -&gt; join choose on choose.student_no = student.student_no -&gt; join course on choose.course_no = course.course_no -&gt; where score &gt; ( -&gt; select avg(score) -&gt; from student, choose -&gt; where student.student_no = choose.student_no and student_name = &#x27;张三&#x27; -&gt; ); 说明该示例中的子查询是一个单独的select语句，可以不依赖主查询单独运行。这种不依靠主查询，能够独立运行的子查询称为“非相关子查询”。 执行过程 执行子查询，其结果不被显示，而是传递给外部查询，作为外部查询的条件使用。 执行外部查询，并显示整个结果。 相关子查询下面的示例演示了相关子查询，代码第七行标记了两条子查询语句之间的区别（其他SQl代码完全相同），执行结果如下图。 123456789mysql&gt; select class_name, student.student_no, student_name, course_name, score -&gt; from classes join student on student.class_no = classes.class_no -&gt; join choose on choose.student_no = student.student_no -&gt; join course on choose.course_no = course.course_no -&gt; where score &gt; ( -&gt; select avg(score) -&gt; from choose -&gt; where student.student_no = choose.student_no and student_name = &#x27;张三&#x27; -&gt; ); 说明从执行结果可以看到，子查询可以仅仅使用自己定义的数据源，也可以“直接引用”主查询中的数据源，但两者意义完全不同。 如果子查询中仅仅使用了自己定义的数据源， 这种查询是非相关子查询。 非相关子查询是独立于外部查询的子查询， 子查询总共执行一次， 执行完毕后将值传递给主查询。 如果子查询中使用了主查询的数据源， 这种查询是相关子查询， 此时主查询的执行与相关子查询的执行相互依赖。 执行过程 从外层查询中取出一个元组，将元组相关列的值传递给内层查询。 执行内层查询，得到子查询操作的值。 外查询根据子查询返回的结果或结果集得到满足条件的行。 然后外层查询取出下一个元组重复做步骤1-3，直到外层的元组全部处理完毕。 如何区分说了这么多，那我们该如何快速区分非相关子查询和相关子查询呢？ 最简单的办法的就是直接看子查询本身能否执行。比如执行上面的例子中的子查询： 123mysql&gt; select avg(score) -&gt; from choose -&gt; where student.student_no = choose.student_no and student_name = &#x27;张三&#x27;; 会报错：1054 - Unknown column &#39;student.student_no&#39; in &#39;where clause&#39;这样的查询语句构成的子查询便为相关子查询。","categories":[{"name":"未分类","slug":"未分类","permalink":"https://www.laoliang.ink/categories/%E6%9C%AA%E5%88%86%E7%B1%BB/"}],"tags":[{"name":"无标签","slug":"无标签","permalink":"https://www.laoliang.ink/tags/%E6%97%A0%E6%A0%87%E7%AD%BE/"}]},{"title":"理解Java中的向上转型","slug":"理解Java中的向上转型","date":"2016-11-25T12:57:23.000Z","updated":"2024-11-16T11:26:50.315Z","comments":true,"path":"posts/20161125205723/","link":"","permalink":"https://www.laoliang.ink/posts/20161125205723/","excerpt":"","text":"“为新的类提供方法”并不是继承技术中最重要的方面，其最重要的方面是用来表现新类和基类之间的关系。这种关系可以用“新类是现有类的一种类型”这句话加以概括。 这个描述并非只是一种解释继承的华丽的方式，这直接是由语言所支撑的。例如，假设有一个Instrument的代表乐器的基类和一个称谓Wind的导出类。由于继承可以确保基类中所有的方法在导出类中也同样有效，所以能够向基类发送的所有信息同样也可以向导出类发送。如果Instrument类具有一个play()方法，那么Wind乐器也将同样具备。这意味着我们可以准确地说Wind对象也是一种类型的Instrument。下面这个例子说明了编译器是怎样支持这一概念的： 1234567891011121314class Instrument &#123; public void play() &#123;&#125; static void tune(Instrument i) &#123; /* --- */ i.play(); &#125;&#125;public class Wind extends Instrument &#123; public static void main(String[] args) &#123; Wind flute = new Wind(); Instrument.tune(flute); // 向上转型 &#125;&#125; 在此例中，tune()方法可以接受Instrument引用，这实在太有趣了。但在Wind.main()中，传递给tune()方法的是一个Wind引用。鉴于Java对类型的检查十分严格，接受某种类型的方法同样可以接受另外一种类型就会显得很奇怪，除非你认识到Wind对象同样也是一种Instrument对象，而且也不存在任何tune()方法是可以通过Instrument来调用，同时又不存在于Wind之中。在tune()中，程序代码可以对Instrument和它所有的导出类起作用，这种将Wind引用转换为Instrument引用的动作，我们称之为向上转型。 为什么称为向上转型该术语的使用有其历史原因，并且是以传统的类继承图的绘制方法为基础的：将根置于页面的顶端，然后逐渐向下。（当然也可以以任何你认为有效的方法进行绘制。）于是，Wind.java的继承图就是： 由于导出类转型成基类，在继承图上是向上移动的，因此一般称为向上转型。由于向上转型是从一个较专用类型向较通用类型转换，所以总是很安全的。也就是说，导出类是基类的一个超集。它可能比基类含有更多的方法，但它必须至少具备基类中所含有的方法。在向上转型的过程中，类接口唯一可能发生的事情是丢失方法，而不是获取它们。这就是为什么编译器在“未曾明确表示转型”或“未曾指定特殊标记”的情况下，仍然允许向上转型的原因。 再论组合与继承在面向对象编程中，生成和使用程序代码最有可能采用的方法就是直接将数据和方法包装进一个类中，并使用该类的对象。也可以运用组合技术使用现有类来开发新的类；而继承技术其实是不太常用的。因此尽管在教授OOP的过程中我们多次强调继承，但这并不意味着要尽可能使用它。相反应当慎用这一技术，其使用场合仅限于你确信使用该技术确实有效的情况。到底是该用组合还是用继承，一个最清晰的判断方法就是问一问自己是否需要从新类向基类进行向上转型。如果必须向上转型，则继承是必要的；但如果不需要，则应当好好考虑自己是否需要继承。","categories":[{"name":"未分类","slug":"未分类","permalink":"https://www.laoliang.ink/categories/%E6%9C%AA%E5%88%86%E7%B1%BB/"}],"tags":[{"name":"无标签","slug":"无标签","permalink":"https://www.laoliang.ink/tags/%E6%97%A0%E6%A0%87%E7%AD%BE/"}]},{"title":"Java赋值操作符注意事项及方法调用中的别名问题","slug":"Java赋值操作符注意事项及方法调用中的别名问题","date":"2016-11-18T08:16:22.000Z","updated":"2024-11-16T11:26:50.314Z","comments":true,"path":"posts/20161118161622/","link":"","permalink":"https://www.laoliang.ink/posts/20161118161622/","excerpt":"","text":"让我们先来回顾一下Java中的一些特性 ~~ 一切都是对象“如果我们说另一种不同的语言，那么我们就会发觉一个有些不同的世界。”——Luduing Wittgerstein(1889-1951) 尽管Java是基于C++的，但是相比之下，Java是一种更“纯粹”的面向对象程序设计语言。 Java语言假设我们只是进行面向对象的程序设计。也就是说，在开始用Java进行设计之前，必须将思想转化到面向对象的世界中来。这个入门基本功，可以使你具备使用这样一门编程语言编程的能力，这种语言学习起来更简单，也比许多其他OOP语言更易用。 用引用操作对象每种编程语言都有自己的操作内存中元素的方式。有时候，程序员必须注意将要处理的数据是什么类型。你是直接操作元素， 还是用某种给予特殊语法的间接表示（例如C和C++里的指针）来操作对象？ 所有这一切在Java里都得到了简化。一切都被视为对象，因此可采用单一固定的语法。尽管一切都看做对象，但操作的标识符实际上是对象的一个“引用”（reference）。 特例（基本类型）在程序设计中经常用到一系列类型，他们需要特殊对待。可以把它们想象成“基本”类型。之所以特殊对待，是因为new将对象存储在“堆”里，故用new创建一个对象——特别是小的、简单的变量，往往不是很有效。因此，对于这些类型，Java采用与C和c++相同的方法。也就是说，不用new来创建变量，而是创建一个并非是引用的“自动”变量。这个变量直接存储“值”，并置于堆栈中，因此更加高效。 举例（有关赋值操作）在开始问题之前我们先来看这样一段代码 123456789101112131415161718192021class Tank &#123; int level;&#125;public class Assignment &#123; public static void main(String[] args) &#123; Tank t1 = new Tank(); Tank t2 = new Tank(); t1.level = 9; t2.level = 47; System.out.println(&quot;No.1: t1.level:&quot; + t1.level + &quot;, t2.level:&quot; + t2.level); t1 = t2; System.out.println(&quot;No.2: t1.level:&quot; + t1.level + &quot;, t2.level:&quot; + t2.level); t1.level = 27; System.out.println(&quot;No.3: t1.level:&quot; + t1.level + &quot;, t2.level:&quot; + t2.level); &#125;&#125; 运行结果 123No.1: t1.level:9, t2.level:47No.2: t1.level:47, t2.level:47No.3: t1.level:27, t2.level:27 为什么是这样一个结果呢？ 其实 Tank类非常简单，它的两个实例（t1和t2）是在main()里创建的。对每个Tank类对象的level域都赋予了一个不同的值，然后，将t2赋给t1， 接着又修改了t1。在许多编程语言中，我们可能会期望t1和t2总是相互独立的。但由于赋值操作的是一个对象的引用，所以修改t1的同时也改变了t2！这是由于t1和t2包含的是相同的引用，它们指向相同的对象。（原本t1包含的对对象的引用，是指向一个值为9的对象。在对t1赋值的时候，这个引用被覆盖了，也就是丢失了；而那个不再被引用的对象会由“垃圾回收器”自动清理。） 这种特殊的现象通常称作“别名现象”，是Java操作对象的一种基本方式。在这个例子中，如果想避免别名问题应该怎么办呢？可以这样写： 1t1.level = t2.level; 这样便可以保持两个对象彼此独立，而不是将t1和t2绑定到相同的对象。但你很快就会意识到，直接操作对象内的域容易导致混乱，并且，违背了良好的面向对象程序设计的原则。这可不是一个小问题，所以从现在开始大家就应该留意，为对象赋值可能会产生意想不到的结果。 方法调用中的别名问题将一个对象传递给方法时，也会产生别名问题： 12345678910111213141516class Letter&#123; char c;&#125;public class PassObject &#123; static void f (Letter y)&#123; y.c = &#x27;z&#x27;; &#125; public static void main(String[] args)&#123; Letter x = new Letter(); x.c = &#x27;a&#x27;; System.out.println(&quot;1: x.c: &quot; + x.c); f(x); System.out.println(&quot;2: x.c: &quot; + x.c); &#125;&#125; 输出结果 121: x.c: a2: x.c: z 在很多编程语言中，方法f()似乎要在他的作用域内复制其参数Letter的一个副本；但实际上只是传递了一个引用。所以代码行 1y.c = &#x27;z&#x27;; 实际改变的是f()之外的对象。 别名引起的问题及其解决方法是很复杂的话题，但是你现在就应该知道它的存在，并在使用中注意这个陷阱。","categories":[{"name":"未分类","slug":"未分类","permalink":"https://www.laoliang.ink/categories/%E6%9C%AA%E5%88%86%E7%B1%BB/"}],"tags":[{"name":"无标签","slug":"无标签","permalink":"https://www.laoliang.ink/tags/%E6%97%A0%E6%A0%87%E7%AD%BE/"}]},{"title":"实验——48小时丢手机之随手记","slug":"实验——48小时丢手机之随手记","date":"2016-10-08T00:23:13.000Z","updated":"2024-11-16T11:26:50.313Z","comments":true,"path":"posts/20161008082313/","link":"","permalink":"https://www.laoliang.ink/posts/20161008082313/","excerpt":"","text":"受一篇文章启发，我也尝试进行了这样一场“48小时彻底离开手机和网络”的实验。下面是我在这个过程中随手记下的感受。 在这48小时中，我主要做了些： 阅读完王小波的一本杂文集——《我的精神家园》 阅读完图灵系列期刊——码农.第2期——Javascript 阅读了《Thinging in Java》的第一章 阅读了《Pro Git》的第七章 完成毛概的小作业+复习了微机原理的功课 市中逛街购买生活用品+休闲 洗衣洗鞋以及整理房间…… ☟ 下面是在这过程中的一些随手记 为了模拟常规状态下的真实体验，并未对两天内做具体的安排，具体做什么，看心情好了。 为了增加仪式感，特地在12:00整在社交网站发了一条实验启动的状态，然后关闭手机，切断了一切连接网络的设备。 让我们开始吧！ 为了有一个轻松地开始，我选择干的第一件事是阅读，在自己的待读书目里选出一本最期待的开始了一天。 图书馆坐得累了， 我想起了手机，平日总会赶着休息的空闲刷一刷朋友圈，看看朋友们的动态，这会儿我也犯了这个痒，心里总在焦虑的想，这会儿朋友中又发生了哪些事儿，但我身上没有手机，更不能上网。 我蛮想看看昨天社交平台上的状态有了哪些回复…… 不能上网，只能听iPad里缓存过的歌，平时放松放首歌，歌声基本只是背景乐，自己一定忙着别的，比如刷手机，而这会儿突感无事可做，便听着歌看着歌词，才感歌词好美，平日并未在意的小调，也特别生动。 坐公交去市区，下意识地想拿出手机摆弄，但却发现并没有手机，只好看着满车人民均低着头沉浸在自己的一片天地，只有我独自欣赏窗外闪过的美景，这西南小城，并不繁华但却不落俗气，节奏适宜，的确是宜居的很、巴适得板！生活在一座城，便恋上一座城，明年正也打算拉父母转过来一同生活，共享这安逸。 听到一首赵雷的《人家》，好好听，想搜搜吉他谱看难不，但我不能上网啊！啊哈哈…… 早晨等热水和厕所的这一小段空闲，我翻开了心血来潮买回来的大部头《Thinking in Java》，因为最近忙于琐事，一直未读，今早将目录以前的所有介绍性的章节读了一遍，这是一本可以令人心潮澎湃的书，平日里，这样短小的零碎时间，多数都以手机里的快餐资讯填充了，而现在发现，没有手机和网络也同样可以获得那种快感，而且这种快感更加真实、亲切。 也并非在整个过程中不使用智能设备，当然，手机我是没敢打开，只用iPad听过歌，看过吉他谱和课件，但这所有的操作都是在离线状态下，如果联网，我可能会频繁地切换APP，有人说那些电子设备就不是用来学习的，在联网的情况下的确是这样。 朋友的手机响了，打断了思绪，想起平日学习过程中，被自己手机消息打断的情形，这并不是说自己多么沉迷学习厌恶被打断，而是自己对这种干扰又爱又恨，因为收到消息可以把自己从苦闷的学习中暂时解脱出来而爱，又因为让自己心意上过不去而恨，并且平日更多时候自己还会主动去查看手机是否有新消息。今后学习过程中，将手机关机是个不错的想法。 有时会为关闭手机切断所有网络连接而感到欣喜，我会清晰地知道，在这个时间段内，绝对不会有人来打扰我。 我是想查个单词的，没有手机和网络确实这些需求变得不方便，于是我搬出了吃灰许久的牛津双解，虽然笨拙，但却感到蛮有趣，别有一番风味。 很需要下载一首歌曲，冒险（之所以说是冒险，是因为担心自己控制不住而网上冲浪）打开了iPad的WiFi连接，先开了勿扰模式的，但还是收到了QQ消息的提醒，还是自己心仪女孩发来的，丫的！太有挑战了，我强忍着好奇和期待清空了通知，下载好歌曲之后，关掉了WiFi连接，真好奇收到的是什么，哈哈，我的心绞痛，心中纠结的原因不是因为不能回复消息的负罪感，而是自身期待查看消息的好奇心不能满足。 一想到今晚12点之后就可以重新接入互联网就感到好兴奋，而Now，继续享受这最后一段自在的时光吧！ 书是看不进去了，于是我选择了去吃饭，平时遇到这样坐不住椅子的情况时，多数情况都是用上网冲浪的方式来填充，因为这个原因而得出“没有网络是件好事儿”的结论确实有些牵强，但不可否认的是：在这即将结束的48小时实验时间里、在我并没有给自己提前指定任务清单并试图调用更多自控力去执行清单任务的情况下，确实比往日做了更多有价值或有意义的事情，或者说明显地减少了毫无意义甚至颓废的时间开销。 现在离实验结束还有2小时10分钟，从我内心饱满的状态和充实的感觉以及并未发生的曾预想中的强烈不适反应来看，我得出了下面的结论，或是说实验心得： 在今天，网络和智能设备已经成为我们工作、学习和生活不可分割的一部分，但适时、有计划地丢掉智能设备，断开自身与网络的连接，可以让我们生活得更好！ 以上就是在这48小时实验当中，随手记下的当时时刻的小心情，仅作分享，同时非常感谢陪伴自己一同践行此次“48小时丢手机”实验的美美哒师妹，没有她的提醒，可能并不会真正实践当初只是在脑海里设想过的这个想法。","categories":[{"name":"未分类","slug":"未分类","permalink":"https://www.laoliang.ink/categories/%E6%9C%AA%E5%88%86%E7%B1%BB/"}],"tags":[{"name":"无标签","slug":"无标签","permalink":"https://www.laoliang.ink/tags/%E6%97%A0%E6%A0%87%E7%AD%BE/"}]},{"title":"Markdown简明手册","slug":"Markdown简明手册","date":"2016-09-10T03:46:17.000Z","updated":"2024-11-16T11:26:50.313Z","comments":true,"path":"posts/20160910114617/","link":"","permalink":"https://www.laoliang.ink/posts/20160910114617/","excerpt":"","text":"Markdown 是一种轻量级标记语言，创始人为约翰·格鲁伯（John Gruber）。它允许人们“使用易读易写的纯文本格式编写文档，然后转换成有效的XHTML(或者HTML)文档”。这种语言吸收了很多在电子邮件中已有的纯文本标记的特性。 John Gruber 在 2004 年创造了 Markdown 语言，在语法上有很大一部分是跟亚伦·斯沃茨（Aaron Swartz）共同合作的。这个语言的目的是希望大家使用“易于阅读、易于撰写的纯文字格式，并选择性的转换成有效的 XHTML (或是HTML)”。其中最重要的设计是可读性，也就是说这个语言应该要能直接在字面上的被阅读，而不用被一些格式化指令标记 (像是 RTF 与 HTML)。 因此，它是现行电子邮件标记格式的惯例，虽然它也借鉴了很多早期的标记语言，如：setext、Texile、reStructuredText。 许多网站都使用 Markdown 或是其变种，例如：GitHub、reddit、Diaspora、Stack Exchange、OpenStreetMap 与 SourceForge 让用户更利于讨论。 Markdown同时还是一个由Gruber编写的Perl脚本：Markdown.pl。它把用markdown语法编写的内容转换成有效的、结构良好的XHTML或HTML内容，并将左尖括号&lt;和&amp;号替换成它们各自的字符实体引用。它可以用作单独的脚本，Blosxom和Movable Type的插件又或者BBEdit的文本过滤器。 Markdown也已经被其他人用Perl和别的编程语言重新实现，其中一个Perl模块放在了CPAN(Text::Markdown)上。它基于一个BSD风格的许可证分发并可以作为几个内容管理系统的插件。 引自维基百科 Markdown 1. 斜体和粗体使用 * 和 ** 表示斜体和粗体。 示例： 这是 *斜体*，这是 *粗体*。 效果：这是 斜体，这是 粗体。 2. 分级标题使用 # 表示一级标题，使用 ## 表示二级标题。 示例： # 这是一个一级标题 ## 这是一个二级标题 ### 这是一个三级标题 效果：这是一个一级标题这是一个二级标题这是一个三级标题3. 外链接使用 [描述](链接地址) 为文字增加外链接。 示例： 这是去往 [本人博客](https://www.laoliang.ink) 的链接。 效果：这是去往 本人博客 的链接。 4. 无序列表使用 *，+，- 表示无序列表。 示例： - 无序列表项 1- 无序列表项 2- 无序列表项 3 效果： 无序列表项 1 无序列表项 2 无序列表项 3 5. 有序列表使用数字和点表示有序列表。 示例： 有序列表项 一 有序列表项 二 有序列表项 三 效果： 有序列表项 一 有序列表项 二 有序列表项 三 6. 文字引用使用 &gt; 表示文字引用。 示例： &gt; 野火烧不尽，春风吹又生。 效果： 野火烧不尽，春风吹又生。 7. 行内代码块使用 `代码` 表示行内代码块。 示例： 让我们聊聊 `html`。 效果：让我们聊聊 html。 8. 代码块支持四十一种编程语言的语法高亮的显示，行号显示。 非代码示例： ```$ sudo apt-get install vim-gnome``` 非代码效果：1$ sudo apt-get install vim-gnome Python 示例： ```pythonimport sys for s in sys.stdin: a = [int(i) for i in s.split()] print (a[0] + a[1])``` Python 效果：12345import sysfor s in sys.stdin: a = [int(i) for i in s.split()] print (a[0] + a[1]) JavaScript 示例： ``` javascriptfunction fib(n) { var a = 1, b = 1; var tmp; while (–n &gt;= 0) { tmp = a; a += b; b = tmp; } return a;} document.write(fib(10));``` JavaScript 效果：123456789101112function fib(n) &#123; var a = 1, b = 1; var tmp; while (--n &gt;= 0) &#123; tmp = a; a += b; b = tmp; &#125; return a;&#125;document.write(fib(10)); 9. 插入图像使用 ![描述](图片链接地址) 插入图像。 示例： ![我的头像](https://avatars.githubusercontent.com/u/23415234?s=460&amp;u=246c673b3fe369d7146089bce615857f0aaf09a6&amp;v=4) 效果：","categories":[{"name":"未分类","slug":"未分类","permalink":"https://www.laoliang.ink/categories/%E6%9C%AA%E5%88%86%E7%B1%BB/"}],"tags":[{"name":"无标签","slug":"无标签","permalink":"https://www.laoliang.ink/tags/%E6%97%A0%E6%A0%87%E7%AD%BE/"}]},{"title":"Git常用命令笔记","slug":"Git常用命令笔记","date":"2016-08-04T05:10:48.000Z","updated":"2024-11-16T11:26:50.313Z","comments":true,"path":"posts/20160804131048/","link":"","permalink":"https://www.laoliang.ink/posts/20160804131048/","excerpt":"","text":"注：本文引自图灵社区系列杂志《码农·进击的Java（总第16期）》，部分有删减，仅用于个人备忘笔记及交流使用 作者/颜海镜 90后一枚，活跃在各个技术社区，常以歪脖无脸男作为头像，专注于 Web 前端开发已有三个年头，关注 HTML/CSS/JavaScript 等技术，目前就职于北京金山软件，坚信 Web 赢在未来。热爱思考，热爱开源分享，常翻译些外文博客，此外还爱好读书，羽毛球，乒乓球，相声，铁杆钢丝，当然非常热爱写代码了，http://yanhaijing.com/ 是我的个人博客。 起初的时候我使用 github for windows 这个客户端，再切换到多分支的时候被自动转换换行符坑的不浅，后来阅读了 《git详解》系列文章，对 Git 的了解深入了一步，这篇文章记录个人常用的一些命令，和记不住大一些命令。 安装在 Windows 上安装 Git 同样轻松，我们可以到 https://git-scm.com/downloads 下载对应操作系统的安装包。 安装完成之后，就可以使用命令行的 git 工具（已经自带了 ssh 客户端）了，另外还有一个图形界面的 Git 项目管理工具。 配置配置账号信息123456git config --global user.name yournamegit config --global user.email youname@example.comgit config --list #查看配置的信息git help config #获取帮助信息 配置自动换行（自动转换坑太大）1git config --global core.autocrlf input #提交到 git 是自动将换行符转换为lf 配置密钥123ssh-keygen -t rsa -C yourname@example.com #生成密钥ssh -T git@github.com #测试是否成功 新建仓库123456git init #初始化git status #获取状态git add file #.或*代表全部添加git commit -m &quot;message&quot; #此处注意乱码git remote add origin git@github.com:yourname/test.git #添加源git push -u origin master #push同时设置默认跟踪分支 从现有仓库克隆12git clone git://github.com/yourname/data.gitgit clone git://github.com/schacon/grit.git mypro #克隆到自定义文件夹 本地12345678910111213141516171819git add * #跟踪新文件rm * &amp; git rm * #移除文件git rm -f * #移除文件git rm --cached * #取消跟踪git mv file_from file_to #重命名跟踪文件git log #查看提交记录git commit #提交更新记录git commit -m &quot;message&quot;git commit -a #跳过使用暂存区域，把所有已经跟踪过的文件暂存起来一并提交git commit -amend #修改最后一次提交git reset HEAD * #取消已经暂存的文件git checkout -- file #取消对文件的修改（从暂存区去除file）git checkout branch|tag|commit -- file_name #从仓库取出 file 覆盖当前分支git checkout -- . #从暂存区取出文件覆盖工作区 分支1234567891011121314151617git branch #列出本地分支git branch -r #列出远端分支git branch -a #列出所有分支git branch -v #查看各个分支最后一个提交对象的信息git branch --merge #查看已经合并到当前分支的分支git branch --no-merge #查看未合并到当前分支的分支git branch test #新建 test 分支git checkout test #切换到 test 分支git checkout -b test #新建并切换到 test 分支git checkout -b test dev #基于 dev 新建 test 分支，并切换git branch -d test #删除 test 分支git branch -D test #强制删除 test 分支git merge test #将 test 分支合并到当前分支git rebase master #将 master 分支智商超前的提交，变基到当前分支 远端12345678git fetch origin_name branch_name #拉取远端上指定分支git merge origin_name branch_name #合并远端上指定分支git push origin_name branch_name #推送到远端上指定分支git push origin_name local_branch:server_branch #推送到远端上指定分支git checkout -b test origin/dev #基于远端 dev 新建 test 分支git push origin :server #删除远端分支 源Git 是一个分布式代码管理工具，所以可以支持多个仓库，在 Git 里，服务器上的仓库在本地称之为 remote。 个人开发时，多源用的可能不多，但多源其实非常有用。 12345678910git remote add origin1 git@github.com/yourname/data.gitgit remote #显示全部源git remote -v #显示全部源+详细信息git remote rename origin1 origin2 #重命名git remote rm origin1 #删除git remote show origin1 #查看指定源的全部信息 标签当开发到一定阶段时，给程序打标签是非常棒的习惯。 1234567891011git tag #列出现有标签git tag v0.1 #新建标签git tag -a v0.1 -m &quot;My version 1.4&quot; #新建带注释标签git checkout tag_name #切换到标签git push origin v1.5 #推送分支到源上git push origin --tags #一次性推送所有分支git tag -d v0.1 #删除标签git push origin :refs/tags/v0.1 #删除远程标签 总结啊哈！终于总结完了，以后不会的时候，再也不用到处去找了。 其实还有两个最有用的命令未提到。 12git help * #获取命令的帮助信息git status #获取当前的状态，非常有用，因为 Git 会提示接下来的能做的事情","categories":[{"name":"未分类","slug":"未分类","permalink":"https://www.laoliang.ink/categories/%E6%9C%AA%E5%88%86%E7%B1%BB/"}],"tags":[{"name":"无标签","slug":"无标签","permalink":"https://www.laoliang.ink/tags/%E6%97%A0%E6%A0%87%E7%AD%BE/"}]},{"title":"Git快速入门（三）","slug":"Git快速入门（三）","date":"2016-08-03T05:10:48.000Z","updated":"2024-11-16T11:26:50.313Z","comments":true,"path":"posts/20160803131048/","link":"","permalink":"https://www.laoliang.ink/posts/20160803131048/","excerpt":"","text":"现在的你对于 Git 应该完全不会感到陌生了吧，通过之前两节内容的学习，你已经掌握了很多 Git 中常用的命令，像提交代码这种简单的操作相信肯定是难不倒你的。 那么打开 Git Bash，在指定目录创建项目的跟目录，然后执行提交操作： 123git initgit add .git commit -m &quot;First Commit.&quot; 这样就将准备工作完成了，下面就让我们开始学习关于 Git 的高级用法。 分支的用法分支是版本控制工具中比较高级且比较重要的一概念，它主要的作用就是在现有代码的基础上开辟一个分叉口，使得代码可以在主干线和分支线上同时进行开发，且相互之间不会影响。 你也许会有疑惑，为什么需要建立分支呢？只在主干线上进行开发不是挺好的吗？没错，通常情况下，只在主干线上进行开发是完全没有问题的， 不过一旦涉及版本的情况，如果不建立分支的话，你就会非常的头疼。 举个例子吧比如说你们公司研发了一款不错的软件，最近刚刚完成，并推出了1.0版本。但是领导是不会让你们闲着的，马上提出了新的需求，让你们投入到了1.1版本的开发工作当中。过了几个星期，1.1版本的功能已经完成了一半，但是这个时候用户反馈，之前上线的1.0版本发现了几个重大的bug，严重影响软件的正常的正常使用。领导也相当重视这个问题，要求你们立刻修复这些bug，并重新发布1.0版本，但这个时候你就非常为难了，你会发现根本没法儿去修复这些bug。因为现在1.1版本已经开发到一半了，如果在现有的代码的基础上修复这些bug，那么更新的1.0版本将会带有一半1.1版本的功能！ 进退两难了是不是？但是如果你使用了分支的话，就完全不会存在这个让人头疼的问题。你只需要在发布1.0版本的时候建立一个分支，然后在主线上继续开发1.1版本的功能。当1.0版本上发现任何bug的时候，就在分支上进行修改，然后发布新的1.0版本，并记得将修改后的代码合并到主干线上。这样的话，不仅可以轻松解决掉1.0版本存在的bug，而且保证了主干线上的代码也已经修复了这些bug，当1.1版本发布的时候就不会有同样的bug存在了。 说了这么多，相信你也已经意识到分支的重要性了，那么我们马上来学习一下如何在Git中操作分支吧。 分支的英文名是branch，如果想要查看当前的版本库当中有哪些分支，可以使用git branch这个命令。 创建一个分支： 1git branch version1.0 这样就创建了一个名为version1.0的分支，我们可以再次输入git branch这个命令来检查一下。 切换分支： 1git checkout version1.0 这样我们就可以把代码成功切换到version1.0这个分支上了。 需要注意的是，在version1.0分支上修改并提交的代码将不会影响到master分支。同样的道理，在master分支上修改并提交的代码也不会影响到version1.0分支。因此如果我们在version1.0分支上修复了一个bug，在master分支上这个bug仍然是存在的。这时将修改的代码一行行赋值到master分支显然不是一种聪明的做法，最好的办法就是使用merge命令来完成合并操作： 12git checkout mastergit merge version1.0 仅仅这样简单的两行命令，就可以把在version1.0分支上修改并提交的内容合并到master分支上了。当然，在合并分支的时候还有可能出现代码冲突的情况，这个时候你就需要静下心来慢慢找出并解决这些冲突，Git在这里就无法帮助你了。 最后，当我们不再需要version1.0这个分支的时候，可以使用如下命令将这个分支删除掉： 1git branch -D version1.0 与远程版本库协作可以这样说，如果你是一个人在开发，那么使用版本控制工具救援预案无法发挥出它真正强大的功能。没错，所有版本控制工具最重要的一个特点就是可以使用它来进行团队合作开发。每个人的电脑上都会有一份代码，当团队的某个成员在自己的电脑上编写完成了某个功能之后，就将代码提交到服务器，其他的成员只需要将服务器上的代码同步到本地，就能保证整个团队所有人的代码都相同。这样的话，每个团队成员就可以各司其职，大家共同来完成一个较为庞大的项目。 那么如何使用Git来进行团队合作开发呢？这就需要有一个远程的版本库，团队的每个成员都从这个版本库中获取到最原始代码，然后各自进行开发，并且以后每次提交的代码都同步到远程版本库上就可以了。另外，团队中的每个成员最好都要养成经常从版本库中获取最新代码的习惯，不然的话，大家的代码就很有可能经常出现冲突。 比如说现在有一个远程版本库的Git地址是https://github.com/example/test.git，就可以使用如下的命令将代码下载到本地： 1git clone https://github.com/example/test.git 之后你在这份代码的基础上进行了一些修改和提交，那么怎样才能把本地修改的内容同步到远程版本库上呢？这就需要借助push命令来完成了，用法如下： 1git push origin master 其中origin部分指定的是远程版本库的Git地址，master部分指定的是同步到哪一个分支上，上述命令就完成了将本地代码同步到https://github.com/example/test.git这个版本库的master分支上的功能。 知道了将本地的修改同步到远程版本库上的方法，接下来我们看一下如何将远程版本库上的修改同步到本地。Git提供了两种命令来完成此功能，分别是fetch和pull，fetch的语法规则和push是差不多的，如下： 1git fetch origin master 执行这个命令后，就会将远程本本库上的代码同步到本地，不过同步下来的代码并不会合并到任何分支上去，而是会存放在一个origin/master分支上，这是我们就可以通过diff命令来查看远程版本库上到底修改了哪些东西： 1git diff origin/master 之后再调用merge命令将origin/master分支上的修改合并到主分支上即可，如下所示： 1git merge origin/master 而pull命令则是相当于将fetch和merge这两个命令放在一起执行了，它可以从远程版本库上获取最新的代码并合并到本地，用法如下： 1git pull origin master 注：Git快速入门 系列文章大部分内容整理自“郭霖”大神的《第一行代码》内容，记录在此仅做备忘笔记及交流使用，切勿用于商业用途","categories":[{"name":"未分类","slug":"未分类","permalink":"https://www.laoliang.ink/categories/%E6%9C%AA%E5%88%86%E7%B1%BB/"}],"tags":[{"name":"无标签","slug":"无标签","permalink":"https://www.laoliang.ink/tags/%E6%97%A0%E6%A0%87%E7%AD%BE/"}]},{"title":"Git快速入门（二）","slug":"Git快速入门（二）","date":"2016-08-02T05:10:48.000Z","updated":"2024-11-16T11:26:50.313Z","comments":true,"path":"posts/20160802131048/","link":"","permalink":"https://www.laoliang.ink/posts/20160802131048/","excerpt":"","text":"上一次我们介绍了 Git 的环境配置和创建本地版本库本节我们一起来看 Git 的更多使用技巧。 忽略文件为什么要忽略文件呢，版本控制工具的初衷之一就是为了能够更多人更好地合作，方便多人维护同一份代码，那么对于常见的程序源代码，我们往往并不是需要把项目目录下所有的文件都加入到版本控制当中，例如，项目构建过程中生成的文件、本地IDE配置文件等，那么如何才能实现这样的效果呢？ Git 提供了一种可配型很强的机制来允许用户将指定的文件或目录排除在版本控制之外，它会检查代码仓库的目录下是否存在一个名为 .gitignore 的文件，如果存在的话，就去一行行读取这个文件中的内容，并把每一行指定的文件或目录排除在版本控制之外。注意，.gitignore 中指定的文件或目录是可以使用 * 通配符的。 下面是 GitHub 上面给出的常见工程项目的 .gitignore 模板，仅供参考，实际项目中还要根据自己团队间的具体需求进行增改： 链接：A collection of useful .gitignore templates 查看修改内容我们知道可以通过 git status，随时查看版本库工作区当前的文件状态，那么该如何看到更改的内容呢？这就需要借助 diff 命令了，用法如下： 1git diff 这样可以查看到所有文件的更改内容，如果你只想查看某一个文件的更改内容，可以使用如下命令： 1git diff filename 撤销未提交的更改有时候我们的代码可能会写的过于草率，以至于原本正常的功能，结果反倒被我们改出了问题。遇到这种情况时也不用着急，因为只要代码还未提交，所有修改的内容都是可以撤销的。 比如，继上次提交以后，我们在工作区对文件 a.cpp 做了修改，现在如果想要撤销这个修改就可以使用 checkout 命令，用法如下所示： 1git checkout a.cpp 执行了这个命令之后，我们对 a.cpp 这个文件所做的一切修改就应该都被撤销了。我们可以通过 git status 查看该文件的状态。 不过这种撤销方式只适用于那些还没有执行过 add 命令的文件，如果某个文件已经被添加过了，这种方式就无法撤销其更改的内容。 此时我们应该先对其取消添加，然后才可以撤回提交。取消添加用的是 reset 命令，用法如下所示： 1git reset HEAD a.cpp 然后再运行一遍 git status 命令，我们就会发现 a.cpp 这个文件重新变回了为添加状态，此时就可以使用 checkout 命令来将修改的内容进行撤销了。 查看提交记录当项目开发几个月之后，我们可能已经执行过上百次提交操作了，这时，我们可以使用 log 命令查看历史提交信息，用法如下所示： 1git log 如果只想看其中一条记录，可以在命令中指定该记录的 id，并加上 -1 参数表示我们只想看到一行记录，如下所示： 1git log 1fa38 -1 其中提交记录的 id 我们只需要键入开头几个字母就可以了，因为 Git 会帮我们匹配是哪一条提交记录，如果 Git 不能唯一标示，它会提示你。 而如果想查看这条提交记录具体修改了什么内容，可以在命令中加入 -p 参数，命令如下： 1git log 1fa38 -1 -p","categories":[{"name":"未分类","slug":"未分类","permalink":"https://www.laoliang.ink/categories/%E6%9C%AA%E5%88%86%E7%B1%BB/"}],"tags":[{"name":"无标签","slug":"无标签","permalink":"https://www.laoliang.ink/tags/%E6%97%A0%E6%A0%87%E7%AD%BE/"}]},{"title":"Git快速入门（一）","slug":"Git快速入门（一）","date":"2016-08-01T05:10:48.000Z","updated":"2024-11-16T11:26:50.313Z","comments":true,"path":"posts/20160801131048/","link":"","permalink":"https://www.laoliang.ink/posts/20160801131048/","excerpt":"","text":"为什么要写此系列教程我是一个有着严重拖延的人，对于新鲜事物很感兴趣，但是执行力很差。编辑此篇教程既是对自己学习新工具的总结，更是对自己办事执行力上的考验。 好，下面我们进入正题。 关于版本控制什么是 “版本控制”？我为什么要关心它呢？ 版本控制是一种记录一个或若干文件内容变化，以便将来查阅特定版本修订情况的系统。 在本书所展示的例子中，我们对保存着软件源代码的文件作版本控制，但实际上，你可以对任何类型的文件进行版本控制。 如果你是位图形或网页设计师，可能会需要保存某一幅图片或页面布局文件的所有修订版本（这或许是你非常渴望拥有的功能），采用版本控制系统（VCS）是个明智的选择。有了它你就可以将某个文件回溯到之前的状态，甚至将整个项目都回退到过去某个时间点的状态，你可以比较文件的变化细节，查出最后是谁修改了哪个地方，从而找出导致怪异问题出现的原因，又是谁在何时报告了某个功能缺陷等等。使用版本控制系统通常还意味着，就算你乱来一气把整个项目中的文件改的改删的删，你也照样可以轻松恢复到原先的样子。但额外增加的工作量却微乎其微。 ——摘自《Pro Git 2nd Edition (2014)》 本篇教程只是带领大家快速了解 Git，并掌握 Git 的基础用法。更多规范详细教程请参考：官方文档 Pro Git （可切换中文版哦） Git的安装及环境配置Linux下的安装由于 Git 和 Linux 操作系统是同一个作者，因此 Git 在 Linux 上的安装是最简单方便的。比如你用的是 Ubuntu 系统，只需要打开 shell 界面，并输入： 1sudo apt-get install git 按下回车后输入密码，即可完成 Git 的安装。 如果是老一点的 Linux 系统，要把命令改为： 1sudo apt-get install git-core 因为以前有个软件也叫GIT（GNU Interactive Tools），结果Git就只能叫git-core了。由于Git名气实在太大，后来就把GNU Interactive Tools改成gnuit，git-core正式改为git。 Windows下的安装虽然 Windows 常被程序员诟病是最烂的开发平台，不过我相信在中国，你最有可能使用的还是 Windows 操作系统。不同于 Linux，Windows 上无法通过一行命令就完成安装，我们需要把 Git 的安装包到 官网下载 下来，之后一直点击“下一步”就可以完成安装了。 Mac下的安装哈哈，穷小子买不起苹果电脑，没办法给大家演示，不过安装方法都是大同小异，命令行、第三方工具、官网直接下载…… 创建版本库初次运行Git前的配置如果你使用的是 Linux 系统，就先打开 shell 界面，如果用的是 Windows 系统，就从开始里找到 Git Bash 并打开。 首先应该配置一下你的身份，这样在提交代码的时候 Git 就可以知道是谁提交的了，命令如下所示： 12git config --global user.name &quot;Your name&quot;git config --global user.email &quot;Your email&quot; 配置完成后你还可以使用同样的命令查看是否配置成功，只需要将最后的名字和邮箱地址去掉即可，向下面这样： 12git config --global user.namegit config --global user.email 以上的基础信息配置，作用域是针对全局的（global），也就是说，在当前机器下，默认创建的所有版本仓库都会应用此配置信息，如果想要单独针对某一个仓库设定不同的配置信息，可以针对指定仓库单独配置。 初始化仓库然后我们就可以开始常见代码仓库了，仓库（Repository）适用于保存版本管理所需信息的地方，所有本地提交的代码都会被提交代码仓库中，如果有需要的还可以再推送到远程仓库中。 首先移动到想要创建仓库的文件夹下： 1cd ./YourRepositoryFolder 初始化仓库： 1git init 这时，在你保存 Git 仓库的文件夹下就会生成一个隐藏的 .git 文件夹，这个文件夹就是用来记录本地所有的 Git 操作的，可以通过 ls -al 查看一下。 如果你想要删除本地仓库，只需要删除这个文件夹就行了。 提交本地代码代码仓库简历完之后就可以提交代码了，其实提交代码也非常简单，只需要使用 add 和 commit 命令就可以了，add 命令用于把想要提交的代码先添加进来（设置 追踪），而 commit 则是真正的去执行提交操作。 首先我们在刚刚的文件夹下创建两个新文件 one.txt 和 two.txt，我们可以通过以下命令将其添加到进来： 12git add one.txtgit add two.txt 也可以一次性添加所有文件： 1git add . 期间，我们可以通过以下命令来随时查看工作区状态： 1git status 接下来我们可以来提交一下，输入如下命令： 1git commit -m &quot;First commit&quot; 注意，在 commit 命令后面，我们一定要通过 -m 参数来加上提交的描述信息，没有描述信息的提交被认为是不合法的。这样所有的代码就已经成功提交了！","categories":[{"name":"未分类","slug":"未分类","permalink":"https://www.laoliang.ink/categories/%E6%9C%AA%E5%88%86%E7%B1%BB/"}],"tags":[{"name":"无标签","slug":"无标签","permalink":"https://www.laoliang.ink/tags/%E6%97%A0%E6%A0%87%E7%AD%BE/"}]}],"categories":[{"name":"未分类","slug":"未分类","permalink":"https://www.laoliang.ink/categories/%E6%9C%AA%E5%88%86%E7%B1%BB/"}],"tags":[{"name":"无标签","slug":"无标签","permalink":"https://www.laoliang.ink/tags/%E6%97%A0%E6%A0%87%E7%AD%BE/"}]}